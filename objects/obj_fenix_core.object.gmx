<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NX Launcher+ variables
///Fenix Launcher's Variables
is_playing = 0;
delay = 0;
nav_time = 60;
offset = 224;
offset_v = 32;
info_popup = 0;
boot_res = "/max";
boot_wait = "/WAIT";
boot_attach = "";
profile_page = 0;

///Mover
move = 0;
move_origin = -1;
move_temp_title = "";
move_temp_path = "";
move_temp_shortcut = 1;
move_temp_thumbnail = noone;

///Controle dos Pais
parental_offset = 0;
parental_unlock = 0;
parental_fade = 3;
parental_fadeicons = 1;

///In-launcher dialog
dialog = 0;
dialog_description = "";
dialog_return = "";
dialog_inputb = " ";
dialog_filterleft = 1280;
dialog_filterright = 1280;

///Selector's main base colors
col_numb = 0;
col_mod = 0;

///Create a variable to access "User", Fenix Launcher and both "Local" and "Roaming" AppData folders
global.userdir = environment_get_variable("USERPROFILE");
global.launcherdir = global.userdir + "\NX_Launcher_Plus"
global.local_appdatadir = global.userdir + "\AppData\Local"
global.roaming_appdatadir = global.userdir + "\AppData\Roaming"
global.appdata_launcherdir = global.local_appdatadir + "\NX_Launcher_"
global.launcher_coredir = working_directory + "\core"

///Create a variable to access Fenix Launcher's Public GitHub Database server
global.db_server = "https://raw.githubusercontent.com/WodsonKun/Fenix_Database/master"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mover arquivos
//Mover destino para origem...
if(file_exists(game_save_id+"title_collection\game_"+string(select_index)+".ini")){

    //Mover...
    games_title[move_origin] = games_title[select_index];
    games_path[move_origin] = games_path[select_index];
    games_shortcut[move_origin] = games_shortcut[select_index];
    games_thumb[move_origin] = sprite_duplicate(games_thumb[select_index]);
    
    //Deletar sprite de destino
    sprite_delete(games_thumb[select_index]);
    
    //Renomear
    file_rename_fmns(game_save_id+"title_collection\game_"+string(select_index)+".png",game_save_id+"collection\game_"+string(move_origin)+".png");
    file_rename_fmns(game_save_id+"title_collection\game_"+string(select_index)+".ini",game_save_id+"collection\game_"+string(move_origin)+".ini");

    //Ir para próximo arquivo...
    alarm[11] = 5;
};
//Mover origem (que estava em TMP) para destino...
else{

    //Carregar novos...
    games_title[select_index] = move_temp_title;
    games_path[select_index] = move_temp_path;
    games_shortcut[select_index] = move_temp_shortcut;
    games_thumb[select_index] = sprite_duplicate(move_temp_thumbnail);
    
    //Corrigir nome
    ini_open(game_save_id+"title_collection\game_"+string(move_origin)+".ini")
    games_title[move_origin] = ini_read_string("NX_TITLE","title","???");
    ini_close();
    
    //Deletar sprite de origem
    sprite_delete(move_temp_thumbnail);
    
    //Renomear
    file_rename_fmns(game_save_id+"title_collection\game_TMP.png",game_save_id+"collection\game_"+string(select_index)+".png");
    file_rename_fmns(game_save_id+"title_collection\game_TMP.ini",game_save_id+"collection\game_"+string(select_index)+".ini");

    //SFX
    audio_play_sfx(sfx_nx_notification_general);
    
    //Limpar
    cleanmem();
    
    //Finalizar
    move = 0;
    move_origin = -1;
    alarm[11] = -1;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Organizar arquivos
if(move_rest &lt; games_total-1)
{

    //Mover...
    games_title[move_rest] = games_title[move_rest+1];
    games_path[move_rest] = games_path[move_rest+1];
    games_shortcut[move_rest] = games_shortcut[move_rest+1];
    games_thumb[move_rest] = sprite_duplicate(games_thumb[move_rest+1]);
    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_rest+1)+".png",game_save_id+"title_collection\game_"+string(move_rest)+".png");
    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_rest+1)+".ini",game_save_id+"title_collection\game_"+string(move_rest)+".ini");

    //Ir para próximo arquivo...
    move_rest++;
    alarm[10] = 5;
};
else{

    //Decrementar
    audio_stop_sound(sfx_nx_notification_general);
    audio_play_sfx(sfx_nx_notification_general);
    games_total--;

    //Salvar total de jogos
    ini_open(game_save_id+"title_collection\_total.ini");
    ini_write_string("NX_TITLE","total",string(games_total));
    ini_close();

    //Limpar
    cleanmem();
    
    //Atualizar RPC
    event_user(0);
    alarm[10] = -1;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add thumbnails into NX Launcher+
//Buscar caminho...
var file = get_open_filename_ext(file_main_filter, "", global.userdir, file_main_title);
if(file != "")
{
    //SFX
    audio_play_sfx(sfx_nx_notification_general);
    
    //Buscar miniatura...
    var thumb = get_open_filename_ext(file_thumbnail_filter, "", global.userdir, file_thumbnail_title);
    if(thumb != "")
    {
        games_thumb[games_total] = sprite_add(thumb,0,0,1,0,0);
        file_copy(thumb,game_save_id+"title_collection\game_"+string(games_total)+".png");
        audio_play_sfx(sfx_nx_notification_general);
    };
    else
    {
        games_thumb[games_total] = "core\assets\default.tbn"
        audio_play_sfx(sfx_nx_system_error);
    }
    
    //É um ATALHO?
    var scut = show_question(question_shortcut);
    if(scut == 1)
    {
        games_shortcut[games_total] = 1;
    }
    else
    {
        games_shortcut[games_total] = 0;
    }
    
    ///---------- ROM Filter ----------
    var name = filename_name(file);
    if (name == "")
    {
        games_rom[games_total] = '';
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    //NES (Mesen)
    else if (name == "Mesen.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_nes_rom_filter, "", global.userdir, file_nes_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //Super Nintendo Entertainment System (Snes9x, ZSNES)
    else if (name == "snes9x.exe") || (name == "snes9x-x64.exe") || (name == "zsnes.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_snes_rom_filter, "", global.userdir, file_snes_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //Nintendo Game Boy (Original, Color, Advance and Super)
    else if (name == "VisualBoyAdvance.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_gameboy_rom_filter, "", global.userdir, file_gameboy_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //Nintendo GameCube / Wii (Dolphin)
    
    //Nintendo 3DS (Citra)
    else if (name == "citra.exe") || (name == "citra-qt.exe")  || (name == "citra-room.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_3ds_rom_filter, "", global.userdir, file_3ds_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //Nintendo WiiU (CemU)
    else if (name == "cemu.exe")
    {
         //Is it a ROM shortcut?
         var rom_scut = show_question(question_romshortcut);
         if (rom_scut == 1)
         {
            games_rom[games_total] = get_open_filename_ext(file_wiiu_rom_filter, "", global.userdir, file_wiiu_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom","-g" + string(games_rom[games_total]));
        ini_close();
    }
    
    //Nintendo Switch (Yuzu, RyujiNX)
    else if (name == "yuzu.exe") || (name == "yuzu-cmd.exe") || (name == "Ryujinx.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_switch_rom_filter, "", global.userdir, file_switch_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //SEGA Master System / Game Gear / Genesis / 32x / CD (KEGA Fusion)
    else if (name == "Fusion.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_sega_rom_filter, "", global.userdir, file_sega_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //SEGA Saturn
    //SEGA Dreamcast
    //Xbox
    //Xbox 360
    //PlayStation (PCSX-R)
    //PlayStation 2 (PCSX2)
    
    //PlayStation Portable (PPSSPP, JCPSP)
    else if (name == "PPSSPPWindows.exe") || (name == "PPSSPPWindows64.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psp_rom_filter, "", global.userdir, file_psp_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_close();
    }
    else if (name == "jcpsp.jar")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psp_rom_filter, "", global.userdir, file_psp_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", "-u " + "string(games_rom[games_total])" + " -r");
        ini_close();
    }
    
    //PlayStation 3 (RPCS3)
    //PlayStation 4 (GPCS4)
    
    //Adicionar jogo
    games_title[games_total] = string_copy(filename_name(file),0,48);
    games_path[games_total] = file;
                    
    //Salvar no diretório
    ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
    ini_write_string("NX_TITLE","title",string_copy(filename_name(file),0,48));
    real(ini_write_string("NX_TITLE","shortcut",string(games_shortcut[games_total])));
    ini_write_string("NX_TITLE","path",string(file));
    ini_close();
            
    //Incrementar total
    ini_open(game_save_id+"title_collection\_total.ini");
    ini_write_string("NX_TITLE","total",string(games_total+1));
    ini_close();
    games_total++;
    select_index = games_total-1;
  
    //Limpar
    cleanmem();
    
    //Atualizar RPC
    event_user(0);
    
    //Voltar fullscreen... (Se tiver sido definido antes)    
    window_set_fullscreen(fullscreen);
    
    //Alterar nome
    dialog_description = "Set the title's name:"
    keyboard_string = string_copy(filename_name(file),0,48);
    dialog_return = string_copy(filename_name(file),0,48);
    dialog = 1;
    alarm[6] = 1;
};
//Voltar fullscreen... (Se tiver sido definido antes)    
else
{
    audio_play_sfx(sfx_nx_system_error);
    cleanmem();
    window_set_fullscreen(fullscreen);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alterar nome do jogo
if(dialog == 1)
    alarm[6] = 1;
else
{
    //Adicionar jogo
    games_title[select_index] = dialog_return;

    //Salvar a alteração
    ini_open(game_save_id+"title_collection\game_"+string(select_index)+".ini");
    ini_write_string("NX_TITLE","title",string(dialog_return));
    ini_close();
    cleanmem();
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dialog effect
if(dialog == 1)
{
    if(dialog_inputb == " ")
    {
        dialog_inputb = "_";
    }
    else
    {
        dialog_inputb = " ";
    }
    alarm[5] = 15;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set fullscreen
//Fullscreen
window_set_fullscreen(fullscreen);
if (fullscreen == 0)
{
    //Restore size/position
    window_set_position(temp_x,temp_y);
    window_set_size(temp_w,temp_h);
    
    //Center window
    alarm[3] = 2;
};
else
{
    window_set_position(-4000,-4000);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window
window_center();

//Store size/position
temp_x = window_get_x();
temp_y = window_get_y();
temp_w = window_get_width();
temp_h = window_get_height();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Retomar launcher
cleanmem();
io_clear();
is_playing = 0;
display_set_ui_visibility(1);

//Recarregar assets
event_user(13);

//Limpar
cleanmem();

//Dar foco ao launcher
window_has_focus();

//SFX
audio_play_sfx(sfx_nx_system_home);

//Recuperar posição/tamanho
alarm[4] = 2;

//Deletar .BAT
file_delete_fmns(game_save_id+"gameboot.bat");

//Atualizar RPC
event_user(0);

//Limpar
cleanmem();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Iniciar jogo
//Limpar
cleanmem();
io_clear();

//Limpar RAM
event_user(14);

//Executar .BAT (E aguardar execução ser finalizada...)
execute_shell('"'+game_save_id+'gameboot.bat"',1,1);

//Limpar
cleanmem();

//Após jogo finalizado...
alarm[2] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Preparar para iniciar jogo
cleanmem();
is_playing = 1;
display_set_ui_visibility(0);

//Lembrar posição/tamanho
if(fullscreen == 0){

    temp_x = window_get_x();
    temp_y = window_get_y();
    temp_w = window_get_width();
    temp_h = window_get_height();
};

//Definir posição/tamanho
window_set_position(-4000,-4000);
window_set_size(16,16);

//Criar .BAT direcionado ao local do jogo (evita falhas)
var test = file_text_open_write(game_save_id+"gameboot.bat")
file_text_write_string(test,filename_drive(games_path[select_index]));
file_text_writeln(test);
file_text_write_string(test,"cd "+filename_path(games_path[select_index])+"");
file_text_writeln(test);
if (boot_attach != "")
{
    file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+'"'+boot_attach+'"');
}
else
{
    file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'"');
}
file_text_writeln(test);
file_text_close(test);

//Limpar
cleanmem();

//Prosseguir para inicialização
alarm[1] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage and handle HOME Menu movement and actions
if(delay &gt; 0)
    delay--;

//Ignorar quando suspenso
if(is_playing == 1)
||(delay &gt; 0)
||(alarm[7] != -1)
||(alarm[8] != -1)
||(alarm[9] != -1)
||(alarm[10] != -1)
||(alarm[11] != -1)
    exit;

//Clean Memory
cleanmem();

//Inserir texto
if(dialog != 0){

    //Animação de transição (Começo)
    if(dialog_filterright &lt; 1280)
        dialog_filterright += 128;
    dialog_filterleft = -1;
    
    if(window_has_focus()){
    
        //Confirmar
        if((keyboard_check_pressed(vk_enter))
        ||(mouse_check_button_released(mb_left)))
        &amp;&amp;(dialog_filterright &gt; 1279)
        &amp;&amp;!(point_in_rectangle(mouse_x,mouse_y,1063,41,1170+34,41+34)){
        
            delay = 5;
            audio_play_sfx(sfx_nx_system_tick);
            dialog = 0;
            exit;
        };
        
        //Clipboard
        if(keyboard_check(vk_control)){
        
            //Colar
            if(keyboard_check_pressed(ord("V"))){
            
                audio_play_sfx(sfx_nx_system_tick);
                keyboard_string = string_copy(clipboard_get_text(),0,48);
                dialog_return = string_copy(clipboard_get_text(),0,48);
            };
            //Copiar
            else if(keyboard_check_pressed(ord("C"))){
            
                audio_play_sfx(sfx_nx_system_tick);
                clipboard_set_text(dialog_return);
            };
        };
        else{
        
            //SFX de tecla
            if(keyboard_check_pressed(vk_anykey))
                audio_play_sfx(sfx_nx_system_tick);
            
            //Trocar caracteres inválidos
            if(keyboard_check(vk_anykey)){
            
                var stg_a,stg_b,stg_c;
                stg_a = string_copy(keyboard_string,0,48);
                stg_b = string_replace(stg_a,'#',"");
                stg_c = string_replace(stg_b,"'","");
                keyboard_string = stg_c;
                dialog_return = stg_c;
            };
        };
    }
        
    //Efeito
    if(alarm[5] == -1)
    {
        alarm[5] = 15;
        exit;
    }
};
else
{
    //Animação de transição (Fim)
    if(dialog_filterright &gt;= 1280)
    {
        if(dialog_filterleft &lt; 1280)
        {
            dialog_filterleft += 128;
        }
        else
        {
            dialog_filterright = -1;
            dialog_filterleft = -1;
        };
    };
};
    
//WASD
keyboard_set_map(ord("W"),vk_up);
keyboard_set_map(ord("A"),vk_left);
keyboard_set_map(ord("S"),vk_down);
keyboard_set_map(ord("D"),vk_right);

//Gamepad
gamepad_input();

//Cor do seletor de jogos
if(col_mod == 0){

    if(col_numb &lt; 1)
        col_numb += 0.05;
    else
        col_mod =! col_mod;
};
else{

    if(col_numb &gt; 0)
        col_numb -= 0.05;
    else
        col_mod =! col_mod;
};

//Navegação da lista de jogos
if(alarm[0] == -1)
&amp;&amp;(games_total &gt; 0){

    //Mover jogo
    if(keyboard_check_pressed(vk_shift))
    {
        move =! move;
        move_origin = select_index;
    };
    
    //Navegação rápida (Loop)
    if(keyboard_check(vk_right))
    {
        //Intervalo
        if(nav_time &gt; 0)
            nav_time--;
        else
        {
            //Delay em frames
            nav_time = 5;
            
            //Próximo
            if(select_index &lt; games_total-1)
            {
                select_index++;
                audio_play_sfx(sfx_nx_system_gameselect);
            };
        };
    };
    else if(keyboard_check(vk_left))
    {
        //Intervalo
        if(nav_time &gt; 0)
            nav_time--;
        else
        {    
            //Delay em frames
            nav_time = 5;
                    
            //Anterior
            if(select_index &gt; 0)
            {
                select_index--;
                audio_play_sfx(sfx_nx_system_gameselect);
            };
        };
    };
    else
    {
        nav_time = 30;
    }

    //Normal
    if(keyboard_check_pressed(vk_right))
    {
        offset_v = 0;
        
        //Próximo
        if(select_index &lt; games_total-1)
        {
            select_index++;
            audio_play_sfx(sfx_nx_system_gameselect);
        };
        else
        {
            audio_play_sfx(sfx_nx_system_gameborder);
        }
    };
    else if(keyboard_check_pressed(vk_left))
    {
        offset_v = 0;
        
        //Anterior
        if(select_index &gt; 0)
        {
            select_index--;
            audio_play_sfx(sfx_nx_system_gameselect);
        };
        else
        {
            audio_play_sfx(sfx_nx_system_gameborder);
        }
    };
    else if(keyboard_check_pressed(vk_down))
    {
        offset_v = 0;
        
        //Fim
        select_index = games_total-1;
        audio_play_sfx(sfx_nx_system_gameborder);
    };
    else if(keyboard_check_pressed(vk_up))
    {
        offset_v = 0;
        
        //Começo
        select_index = 0;
        audio_play_sfx(sfx_nx_system_gameborder);
    };
    else if(keyboard_check_pressed(vk_enter))
    {    
        if(keyboard_check(vk_alt))
        {
            //Fullscreen
            audio_play_sfx(sfx_nx_notification_general);
            fullscreen =! fullscreen;
            alarm[4] = 3;
            cleanmem();
        };
        else
        {
            //Confirmar após mover
            if(move == 1)
            {
                //Se for local diferente...
                if(select_index != move_origin)
                {
                    //SFX
                    audio_play_sfx(sfx_nx_system_tick);
                    games_title[select_index] = "Moving...";
                    
                    //Copiar
                    move_temp_title = games_title[move_origin];
                    move_temp_path = games_path[move_origin];                  
                    move_temp_shortcut = games_shortcut[move_origin];
                    move_temp_thumbnail = sprite_duplicate(games_thumb[move_origin]);
                    
                    //Deletar de origem
                    sprite_delete(games_thumb[move_origin]);
                    
                    //Renomear arquivo de origem temporariamente...
                    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_origin)+".ini",game_save_id+"title_collection\game_TMP.ini");
                    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_origin)+".png",game_save_id+"title_collection\game_TMP.png");
                    
                    //Mover arquivo destino para de origem...
                    alarm[11] = 10;
                };
                else
                {
                    //SFX
                    audio_play_sfx(sfx_nx_system_tick);
                    
                    //Finalizar
                    move = 0;
                    move_origin = -1;
                    cleanmem();
                };
            };
            else{
            
                //Iniciar jogo
                if(games_total &gt; 0)
                &amp;&amp;(file_exists_fmns(games_path[select_index])){
                
                    //Iniciar máximizado
                    if(fullscreen == 1)
                        boot_res = "/max ";
                    else
                        boot_res = "";
                        
                    //Iniciar e suspender
                    if(games_shortcut[select_index] == 0)
                        boot_wait = "/WAIT ";
                    else
                        boot_wait = "";
                        
                    //ROM
                    if (games_rom[select_index] != "")
                    {
                        boot_attach = string(games_rom[select_index]);
                    }
                    else if (games_rom[select_index] == "")
                    {
                        boot_attach = "";
                    }
                
                    window_set_fullscreen(0);
                    audio_play_sfx(sfx_nx_system_gamestart);
                    alarm[0] = 15;
                };
            };
        };
    };       
};
        
//Deletar jogo
if (move == 1)
{
    if(keyboard_check_released(vk_delete))
    ||(gamepad_button_check_released(1, gp_face3))
    &amp;&amp;(games_total &gt; 0)
    &amp;&amp;(alarm[10] == -1)
    {
        //Deletar sprite
        sprite_delete(games_thumb[select_index]);
        
        //Nulo
        games_title[select_index] = "Deleting...";
        
        //Deletar arquivos
        file_delete_fmns(game_save_id+"title_collection\game_"+string(select_index)+".png");
        file_delete_fmns(game_save_id+"title_collection\game_"+string(select_index)+".ini");
                          
        //Deletar ultimo (sendo o ultimo selecionado)
        if(select_index == games_total-1)
        &amp;&amp;(select_index &gt; 0)
        {
            games_path[select_index] = "";
                
            //Decrementar
            audio_play_sfx(sfx_nx_system_error);
            games_total--;            
            select_index--;
                
            //Salvar total de jogos
            ini_open(game_save_id+"title_collection\_total.ini");
            ini_write_string("NX_TITLE","total",string(games_total));
            ini_close();
            
            //Atualizar RPC
            event_user(0);
            cleanmem();
        };
        //Mover tudo
        else
        {
            audio_play_sound(sfx_nx_system_loading,0,0);
            move_rest = select_index;
            alarm[10] = 10;
            cleanmem();
        };
    };
};

//Fullscreen
if(keyboard_check_released(vk_f10))
{
    fullscreen =! fullscreen;
    alarm[4] = 3;
    cleanmem();
};
    
//Screenshot
var nx_screenshot;
if(keyboard_check_released(vk_f12))
{
    nx_screenshot = get_save_filename_ext("Screenshot|*.png", "", working_directory, "Save a screenshot");
    if nx_screenshot != ""
    {
        window_set_fullscreen(0);
        screen_save(nx_screenshot);
        alarm[4] = 2;
        cleanmem();
    }
};

//Terminate launcher
if (keyboard_check_released(vk_escape))
{
    game_end();
}

///Mouse-featured actions
if(mouse_check_button_released(mb_left)) || (mouse_check_button_released(mb_right))
{
    //Change profile picture
    if(point_in_rectangle(mouse_x,mouse_y,32,30,(32+64),(30+64)))
    {
        profile_page = 1;
    }
    
    //Background adder
    if (point_in_rectangle(mouse_x, mouse_y, 144, 42, 194, 92))
    {
        add_wallpaper();
    }
    
    //Theme changer
    if (point_in_rectangle(mouse_x, mouse_y, 210, 42, 260, 92))
    {
        theme =! theme
    }
    
    if (point_in_rectangle(mouse_x, mouse_y, 276, 42, 276+50, 92))
    {
        add_customtheme();
    }
    
    //Data folder opener
    if (point_in_rectangle(mouse_x, mouse_y, 342, 42, 342+50, 92))
    {
        execute_shell(global.appdata_launcherdir, false, false);
    }
    
    //Add thumbnails
    if(point_in_rectangle(mouse_x,mouse_y, 16, (136+98+98+98), 16+98, (136+98+98+98+98)))
    &amp;&amp;(alarm[7] == -1)
    {
        window_set_fullscreen(0);
        alarm[7] = 2;
    }
    
    //Profile page actions
    if (profile_page != 0)
    {
        if (point_in_rectangle(mouse_x, mouse_y, 336, 160, 336+128, 160+128))
        {
            add_profilepicture();
        }
    }
}

    if (keyboard_check_released(vk_f8))
    {
        event_user(5)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw NX Launcher+ UI
/// ---------- Color Variables ----------
//Black and White (for theme-switching)
c_fx_black = make_colour_rgb(35, 35, 35);
c_fx_white = $f0f0f0
//Blue and Aqua (Cursor)
c_fx_cursor_blue = make_colour_rgb(30, 96, 186);
c_fx_cursor_aqua = make_colour_rgb(0,153,153);
//Blue and Aqua (Normal, Alt. and Names)
c_switchblue = (make_colour_rgb(70,152,200));
c_switchblue_alt = (make_colour_rgb(0,76,153));
c_switchblue_name = (make_colour_rgb(102,178,255));
c_switchaqua = (make_colour_rgb(82,209,202));
c_switchaqua_alt = (make_colour_rgb(0,153,153));
c_switchaqua_name = (make_colour_rgb(0,204,204));
//Blue and Aqua (Merged, useful for effects and names)
c_switchaqua_merge = merge_colour(c_switchaqua, c_switchaqua_alt,col_numb);
c_switchblue_merge = merge_colour(c_switchblue, c_switchblue_alt,col_numb);
c_switchaqua_nmerge = merge_colour(c_switchaqua, c_switchaqua_name,col_numb);
c_switchblue_nmerge = merge_colour(c_switchblue, c_switchblue_name,col_numb);
//Error
c_switcherror = merge_colour(c_red, c_maroon, col_numb);
//Edit Mode
c_switchmove = merge_colour(c_yellow, c_orange, col_numb);

/// ---------- Wallpaper ----------
//No wallpaper exists
switch (theme)
{
    case 0:
    draw_background_tiled_ext(bg_dark, 0, 0, 1, 1, c_white, 1);
    break;
    
    case 1:
    draw_background_tiled_ext(bg_light, 0, 0, 1, 1, c_white, 1);
    break;
}

//Wallpaper exists
if sprite_exists(custom_bg)
{
    draw_sprite_stretched(custom_bg, 0, 0, 0, 1280, 720);
    //Draw semi-transparent wallpaper
    switch (theme)
    {
        case 0:
        draw_background_tiled_ext(bg_semi_dark, 0, 0, 1, 1, c_white, 1);
        break;
        
        case 1:
        draw_background_tiled_ext(bg_semi_light, 0, 0, 1, 1, c_white, 1);
        break;
    }
}
else
{
    switch (theme)
    {
        case 0:
        draw_background_tiled_ext(bg_dark, 0, 0, 1, 1, c_white, 1);
        break;
        
        case 1:
        draw_background_tiled_ext(bg_light, 0, 0, 1, 1, c_white, 1);
        break;
    }
}



/// ---------- Game List UI ----------


//Rolagem (de acordo com offset)
draw_set_font(font_titles)
if(select_index &gt; 1)
    offset = 502+(-276*select_index);
else
    offset = 98;

//Lista de jogos (Mostrar apenas o que esta na tela)
var i, i_start, i_end;
if(select_index &gt; 1){

    i_start = select_index-2;
    i_end = select_index+3;
};
else{

    i_start = 0;
    i_end = select_index+5;
}; for(i=i_start; i&lt;i_end; i+=1){

    var vv = 0;
    if(select_index == i)
        vv = offset_v = -2;
                
    //Sombra
    draw_sprite(spr_gamelist_shadow,theme,85+offset+(256+20)*i,235-vv);
    
    //Blocos vázios
    if(i &gt; games_total-1)
    ||((move == 1)&amp;&amp;(i == move_origin))
        draw_sprite(spr_gamelist_thumbnail,theme,85+offset+(256+20)*i,235-vv);
    //Thumbnail dos jogos
    else
    {
        if(sprite_exists(games_thumb[i]))
        &amp;&amp;(games_total &gt; 0)
        {
            draw_sprite_stretched(games_thumb[i],0,85+offset+(256+20)*i,235-vv,256,256);
        }
        else
        {
            draw_sprite_stretched(global.launcher_coredir + "assets\default.tbn",0,85+offset+(256+20)*i,235-vv,256,256);
        }
    };
};
    
//Seletor de jogos
if(select_index &lt; games_total+1)
&amp;&amp;(games_total &gt; 0)
{
    var _msg;
    
    //Mover
    if(move == 1)
    {
        _msg = games_title[move_origin];
    };
    else
    {
        //Padrão
        if(file_exists_fmns(games_path[select_index]))
        {
            _msg = games_title[select_index];
        };
        //Jogo não encotrado
        else
        {
            _msg = "[Game not found]";
        };
    };

    //Mostrar thumbnail que esta sendo movida
    var move_offset = 0;
    if(move == 1)
    {
        move_offset = 32;
        if(sprite_exists(games_thumb[move_origin]))
        {
            draw_set_alpha(col_numb+0.4);
            draw_sprite_stretched(games_thumb[move_origin],0,85+(offset-0)+276*select_index,236-32-2,256,256);
            draw_set_alpha(1);
        };
    };
    
    //Seletor
    offset_v = 0;
    switch (theme)
    {
        case 0:
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switchblue_merge,1);
        break;
        
        case 1:
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switchaqua_merge,1);
        break;
    }
    if (move == 1)
    {
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switchmove,1);
    }
    if !(file_exists_fmns(games_path[select_index]))
    {
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switcherror,1);
    }
    
    //Nome do jogo selecionado
    if(select_index == 0)
    {
        switch (theme)
        {
            case 0:
            draw_text_colour(85+offset-16,164-offset_v-move_offset,_msg,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,1);
            break;
            
            case 1:
            draw_text_colour(85+offset-16,164-offset_v-move_offset,_msg,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,1);
            break;
        }
        if (move == 1)
        {
            draw_text_colour(85+offset-16,164-offset_v-move_offset,_msg,c_switchmove,c_switchmove,c_switchmove,c_switchmove,1);
        }
        if !(file_exists_fmns(games_path[select_index]))
        {
            draw_text_colour(85+offset-16,164-offset_v-move_offset,_msg,c_switcherror,c_switcherror,c_switcherror,c_switcherror,1);
        }
    }
    else
    {
        draw_set_halign(fa_center);
        switch (theme)
        {
            case 0:
            draw_text_colour(85+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,1);
            break;
            
            case 1:
            draw_text_colour(85+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,1);
            break;
        }
        if (move == 1)
        {
            draw_text_colour(85+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switchmove,c_switchmove,c_switchmove,c_switchmove,1);
        }
        if !(file_exists_fmns(games_path[select_index]))
        {
            draw_text_colour(85+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switcherror,c_switcherror,c_switcherror,c_switcherror,1);
        }
        draw_set_halign(fa_left);
        
        if(move == 0)
        {
            if(games_shortcut[select_index] == 1)
            {
                draw_sprite_ext(spr_gamelist_shortcut_icon,theme,(85+offset+(276*select_index)+(256/2)-116),443+parental_offset-offset_v,1,1,0,c_white,1);
            }
        }
    };
};


/// ---------- Main UI ----------


//Draw sidebar
switch (theme)
{
    case 0:
    draw_rectangle_colour(0, 0, 120, 720, c_fx_black, c_fx_black, c_fx_black, c_fx_black, false);
    break;
    
    case 1:
    draw_rectangle_colour(0, 0, 120, 720, c_fx_white, c_fx_white, c_fx_white, c_fx_white, false);
    break;
}

//Draw profile picture
if (sprite_exists(profile_icon))
{
    draw_sprite_stretched_ext(profile_icon, 0, 32, 30, 64, 64, c_white, 1);
}
else
{
    draw_sprite_stretched_ext(spr_default_profilepicture, 0, 32, 30, 64, 64, c_white, 1);
}
draw_sprite_ext(spr_default_profilepicture_border, theme, 32, 30, 1, 1, 0, c_white, 1);

//Theme-related buttons
draw_sprite_ext(spr_btn_bgchanger, theme, 144, 42, 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_btn_themechanger, theme, ((144+50)+16), 42, 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_btn_themeloader, theme, ((144+50+50)+32), 42, 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_btn_folderopener, theme, ((144+50+50+50)+48), 42, 1, 1, 0, c_white, 1);

//Side buttons
draw_sprite_ext(spr_btn_news, theme, 16, 136, 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_btn_freeshop, theme, 16, (136+98), 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_btn_nofunctionyet, theme, 16, (136+98+98), 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_btn_thumbadd, theme, 16, (136+98+98+98), 1, 1, 0, c_white, 1);
draw_sprite_ext(spr_btn_settings, theme, 16, (136+98+98+98+98), 1, 1, 0, c_white, 1);

//Draw time
var time_hour = string_replace_all(string_format(current_hour,2,0)," ","0");
var time_minute = string_replace_all(string_format(current_minute,2,0)," ","0");
draw_set_font(font_clock)
switch (theme)
{
    case 0:
    draw_set_colour(c_white);
    draw_text(1135, 42, time_hour + ":" + time_minute);
    break;
    
    case 1:
    draw_set_colour(c_black);
    draw_text(1135, 42, time_hour + ":" + time_minute);
    break;
}

//Draw internet connection
switch (theme)
{
    case 0:
    if (os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 3, 1070, 48, 1, 1, 0, c_white, 1)
    }
    else if !(os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 2, 1070, 48, 1, 1, 0, c_white, 1)
    }
    break;
    
    case 1:
    if (os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 1, 1070, 48, 1, 1, 0, c_white, 1)
    }
    else if !(os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 0, 1070, 48, 1, 1, 0, c_white, 1)
    }
    break;
}



/// ---------- Controller and Keyboard UI ----------


//Controllers
draw_set_font(font_details)

//XInput (Xbox and Nintendo controllers)
if(gamepad_is_connected(0) == 1)
{
    //XInput Controller connected
    draw_sprite_ext(spr_ctr_xinput,theme,160,650,1,1,0,c_white,1);
    
    //Controller buttons
    if(games_total &gt; 0)
    {
        //Icons
        switch (move)
        {
            case 0:
            draw_sprite_ext(spr_ctr_xinput_leftright, theme, 640-70, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_xinput_shift, theme, 860+15, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_xinput_enter, theme,1080, 662, 1, 1, 0, c_white, 1);
            break;
            
            case 1:
            draw_sprite_ext(spr_ctr_xinput_leftright, theme,410, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_xinput_delete, theme, 640+70, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_xinput_shift, theme, 860, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_xinput_enter, theme,1080, 662, 1, 1, 0, c_white, 1);
            break;
        }
        
        //Strings
        switch (theme)
        {
            case 0:
            draw_set_colour(c_white)
            break;
            
            case 1:
            draw_set_colour(c_black)
            break;
        }
        switch (move)
        {
            case 0:
            draw_text(704-90, 658, string(command_move));
            draw_text(922-5, 658, string(command_edit));
            draw_text(1140-20, 658, string(command_start));
            break;
            
            case 1:
            draw_text(456, 658, string(command_move));
            draw_text(694+65, 658, string(command_delete));
            draw_text(912-7, 658, string(command_normal));
            draw_text(1140-20, 658, string(command_place));
            break;
        }
    }
};

//DInput (PlayStation and Generic controllers)
else if (gamepad_is_connected(4) == 1)
{
    //XInput Controller connected
    draw_sprite_ext(spr_ctr_dinput,theme,160,650,1,1,0,c_white,1);
    
    //Controller buttons
    if(games_total &gt; 0)
    {
        //Icons
        switch (move)
        {
            case 0:
            draw_sprite_ext(spr_ctr_dinput_leftright, theme, 640-70, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_dinput_shift, theme, 860+15, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_dinput_enter, theme,1080, 662, 1, 1, 0, c_white, 1);
            break;
            
            case 1:
            draw_sprite_ext(spr_ctr_dinput_leftright, theme,410, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_dinput_delete, theme, 640+70, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_dinput_shift, theme, 860, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_ctr_dinput_enter, theme,1080, 662, 1, 1, 0, c_white, 1);
            break;
        }
        
        //Strings
        switch (theme)
        {
            case 0:
            draw_set_colour(c_white)
            break;
            
            case 1:
            draw_set_colour(c_black)
            break;
        }
        switch (move)
        {
            case 0:
            draw_text(704-90, 658, string(command_move));
            draw_text(922-5, 658, string(command_edit));
            draw_text(1140-20, 658, string(command_start));
            break;
            
            case 1:
            draw_text(456, 658, string(command_move));
            draw_text(694+65, 658, string(command_delete));
            draw_text(912-7, 658, string(command_normal));
            draw_text(1140-20, 658, string(command_place));
            break;
        }
    }
};
//Keyboard
else
{
    //Keyboard connected
    draw_sprite_ext(spr_kbd,theme,160,650,1,1,0,c_white,1);
    
    //Keyboard buttons
    if(games_total &gt; 0)
    {
        //Icons
        switch (move)
        {
            case 0:
            draw_sprite_ext(spr_kbd_leftright, theme, 640-70, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_kbd_shift, theme, 860+15, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_kbd_enter, theme,1080, 662, 1, 1, 0, c_white, 1);
            break;
            
            case 1:
            draw_sprite_ext(spr_kbd_leftright, theme,410, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_kbd_delete, theme, 640+70, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_kbd_shift, theme, 860, 662, 1, 1, 0, c_white, 1);
            draw_sprite_ext(spr_kbd_enter, theme,1080, 662, 1, 1, 0, c_white, 1);
            break;
        }
        
        //Strings
        switch (theme)
        {
            case 0:
            draw_set_colour(c_white)
            break;
            
            case 1:
            draw_set_colour(c_black)
            break;
        }
        switch (move)
        {
            case 0:
            draw_text(704-90, 658, string(command_move));
            draw_text(922-5, 658, string(command_edit));
            draw_text(1140-20, 658, string(command_start));
            break;
            
            case 1:
            draw_text(456, 658, string(command_move));
            draw_text(694+65, 658, string(command_delete));
            draw_text(912-7, 658, string(command_normal));
            draw_text(1140-20, 658, string(command_place));
            break;
        }
    }
};


/// ---------- Pop-up ----------
//Profile name
draw_set_font(font_popup);
if(point_in_rectangle(mouse_x,mouse_y,32,30,(32+64),(30+64)))
{
    draw_sprite_ext(spr_popup_profilename, theme, 104, 32, 1, 1, 0, c_white, 1);
    switch (theme)
    {
        case 0:
        draw_set_colour(c_white)
        break;
        
        case 1:
        draw_set_colour(c_black)
        break;
    }
    draw_text(130, 48, string(profile_name));
}

//Background changer
if (point_in_rectangle(mouse_x, mouse_y, 144, 42, (144+50), (42+50)))
{
    draw_sprite_ext(spr_popup_themefunctions, theme, 167, 98, 1, 1, 0, c_white, 1);
    switch (theme)
    {
        case 0:
        draw_set_colour(c_white)
        break;
        
        case 1:
        draw_set_colour(c_black)
        break;
    }
    draw_text(62, 112, home_change_background);
}

//Theme changer
if (point_in_rectangle(mouse_x, mouse_y, 210, 42, 260, 92))
{
    draw_sprite_ext(spr_popup_themefunctions, theme, 245-23, 98, 1, 1, 0, c_white, 1);
    switch (theme)
    {
        case 0:
        draw_set_colour(c_white)
        break;
        
        case 1:
        draw_set_colour(c_black)
        break;
    }
    if (theme == 0)
    {
        draw_text(150-25+5, 112, home_change_lighttheme);
    }
    else
    {
        draw_text(150-25+5, 112, home_change_darktheme);
    }
}

//Theme loader
if (point_in_rectangle(mouse_x, mouse_y, 276, 42, 276+50, 92))
{
    draw_sprite_ext(spr_popup_themefunctions, theme, ((144+50+50)+24+30), 98, 1, 1, 0, c_white, 1);
    switch (theme)
    {
        case 0:
        draw_set_colour(c_white)
        break;
        
        case 1:
        draw_set_colour(c_black)
        break;
    }
    draw_text(170+35-3, 112, home_change_theme);
}


//Folder opener
if (point_in_rectangle(mouse_x, mouse_y, 342, 42, 342+50, 92))
{
    draw_sprite_ext(spr_popup_themefunctions, theme, ((144+50+50+50)+48+30), 98, 1, 1, 0, c_white, 1);
    switch (theme)
    {
        case 0:
        draw_set_colour(c_white)
        break;
        
        case 1:
        draw_set_colour(c_black)
        break;
    }
    draw_text(240+35-2, 112, home_folder_opener);
}

/// ------------ Profile Page ----------
if (profile_page != 0)
{
    draw_sprite_ext(spr_profilepage_bg, theme, 320, 144, 1, 1, 0, c_white, 1);
    draw_sprite_stretched_ext(profile_icon, 0, 336, 160, 128, 128, c_white, 1);
    draw_sprite_stretched_ext(spr_default_profilepicture_border, 0, 336, 160, 128, 128, c_white, 1);
    
    draw_set_font(font_details);
    if (point_in_rectangle(mouse_x, mouse_y, 336, 160, 336+128, 160+128))
    {
        draw_text(360, (160+128+16), "Change profile picture");
    }
    else
    {
        draw_text(360, (160+128+16), profile_name);
    }
}

/// ---------- Filter ----------
//Fundo
if(dialog != 0)
{
    switch (theme)
    {
        case 0:
        draw_set_colour(c_fx_black);
        break;
        
        case 1:
        draw_set_colour(c_fx_white);
        break;
    }
    draw_set_alpha(0.9);
    draw_rectangle(dialog_filterleft,-3000,dialog_filterright,720+3000,0);
    draw_set_colour(c_white);
    draw_set_alpha(1);
};

//Alterar titulo do jogo
if(dialog != 0){

    var dg_offset;
    if(dialog == 1)
        dg_offset = 0;
    else
        dg_offset = 194;
         
    //Descrição
    switch (theme)
    {
        case 0:
        draw_set_colour(c_switchaqua_merge);
        break;
        
        case 1:
        draw_set_colour(c_switchblue_merge);
        break;
    }
    draw_set_halign(fa_center);
    draw_text(1280/2,(720/2-48)+dg_offset,dialog_description+" ("+string(string_length(dialog_return))+"/32)");
        
    //Texto
    if(theme == 1)
        draw_set_colour(c_white);
    else
        draw_set_colour(c_black);
    draw_text(1280/2,(720/2)+dg_offset,dialog_return+dialog_inputb);
    draw_set_halign(fa_left);
    draw_set_colour(c_white);
};

//Deletando...
if(alarm[10] != -1){

    //Fundo
    if(theme == 0)
        draw_set_colour(c_white);
    else
        draw_set_colour(c_black);
    draw_set_alpha(0.7);
    draw_rectangle(-3000,-3000,1280+3000,720+3000,0);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    
    //Texto
    draw_set_colour(c_red);
    draw_set_halign(fa_center);
    draw_text(1280/2,(720/2)-32,"Deleting...");
    draw_set_halign(fa_left);
    draw_set_colour(c_white);
};


//Screen filter (when not using the launcher)
if!(window_has_focus())
&amp;&amp;!(window_get_fullscreen()){

    draw_set_colour(c_black);
    draw_set_alpha(0.7);
    draw_rectangle(0,0,1280,720,0);
    draw_set_alpha(1);
    draw_set_colour(c_white);
};


/// ---------- Cursor ----------


//Draw cursor
switch (theme)
{
    case 0:
    draw_sprite_ext(spr_default_cursor, 0, mouse_x, mouse_y, 1, 1, 0, c_fx_cursor_blue, 1);
    break;
    
    case 1:
    draw_sprite_ext(spr_default_cursor, 0, mouse_x, mouse_y, 1, 1, 0, c_fx_cursor_aqua, 1);
    break;
}
window_set_cursor(cr_none);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean assets (RAM)
//Delete wallpaper
if (sprite_exists(custom_bg))
{
    sprite_delete(custom_bg);
}

//Delete fonts
font_delete(font_titles);
font_delete(font_details);

//Un-draw list
var i;
for(i = 0; i &lt; games_total; i += 1)
{    
    //Delete thumbnails
    if (sprite_exists(games_thumb[i]))
    {
        sprite_delete(games_thumb[i]);
    }
};

//Un-load song
audio_stop_sound(wallpaper_song);
audio_destroy_stream(wallpaper_song);

//Limpar
cleanmem();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load assets (Titles, custom theme and song)
// ---------- Default Assets ----------
///Add necessary fonts in order to boot Fenix Launcher
//Product Sans (Licensed by Google)
font_popup = font_add("core\fonts\font_popup.ttf", 16, false, false, 32, 255)
font_details = font_add("core\fonts\font_details.ttf", 18, false, false, 32, 255)
font_titles = font_add("core\fonts\font_titles.ttf", 24, false, false, 32, 255)
font_clock = font_add("core\fonts\font_clock.ttf", 24, false, false, 32, 255)

// ---------- Custom Theme ----------
ini_open(game_save_id + "custom_theme\_theme.ini");
theme = real(ini_read_string("NX_THEME", "theme", "1"));
custom_bg_path = ini_read_string("NX_THEME", "custom_bg_path", string(game_save_id + "custom_theme\_wallpaper.png"))
custom_details_font = ini_read_string("NX_THEME", "custom_details_font", string(game_save_id + "custom_theme\fonts\thm_details.ttf"))
custom_titles_font = ini_read_string("NX_THEME", "custom_titles_font", string(game_save_id + "custom_theme\fonts\thm_titles.ttf"))
ini_close();

///Song (first load)
wallpaper_song = audio_create_stream(global.launcher_coredir + "assets\dummy.aud");

//Profile Picture
if !(file_exists(game_save_id + "_profile.png"))
{
    profile_icon = spr_default_profilepicture;
}
else
{
    ini_open(game_save_id + "_data.ini");
    profile_image = ini_read_string("User Data", "profile_icon", game_save_id + "_profile.png");
    profile_icon = sprite_add(profile_image, 0, false, false, 0, 0);
    ini_close();
}

///Wallpaper
if (file_exists_fmns(game_save_id + "custom_theme\_wallpaper.png"))
{
    custom_bg = sprite_add(game_save_id + "custom_theme\_wallpaper.png", 0, 0, 0, 0, 0);
}
else
{
    custom_bg = noone;
}

///Song
instance_create(0, 0, obj_musicplayer);

///Fonts
//Titles
if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_titles.ttf"))
{
    font_delete(font_titles);
    font_titles = font_add(custom_titles_font, 24, false, false, 32, 255)
}

//Details
if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_details.ttf"))
{
    font_delete(font_details);
    font_details = font_add(custom_details_font, 18, false, false, 32, 255)
}

///Sound effects
if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_details.ttf"))
{
    snd_sfx_gameselect = audio_create_stream(game_save_id + "custom_theme\sounds\thm_sfx_select.wav")
}

/// ---------- Titles ----------
//Search total amount of titles
games_total = 0;
ini_open(game_save_id + "title_collection\_total.ini");
games_total = real(ini_read_string("NX_TITLE", "total", "0"));
ini_close();

//List
var i;
for(i = 0; i &lt; games_total; i += 1)
{
    //Load titles's details
    ini_open(game_save_id + "title_collection\game_" + string(i) + ".ini");
    games_title[i] = ini_read_string("NX_TITLE","title","???");
    games_path[i] = ini_read_string("NX_TITLE","path","");
    games_rom[i] = ini_read_string("NX_TITLE","rom","");
    games_subselect[i] = real(ini_read_string("NX_TITLE","subselect","1"));
    games_shortcut[i] = real(ini_read_string("NX_TITLE","shortcut","0"));
    games_animframes[i] = real(ini_read_string("NX_TITLE","animframes","1"));
    games_animspeed[i] = real(ini_read_string("NX_TITLE","animspeed","0"));
    games_playtime[i, 0] = real(base64_decode(ini_read_string("NX_TITLE","0","0")));
    games_playtime[i, 1] = real(base64_decode(ini_read_string("NX_TITLE","1","0")));
    
    //Load titles's thumbnails
    if(file_exists_fmns(game_save_id + "\title_collection\game_" + string(i) + ".png"))
    {
        games_thumb[i] = sprite_add(game_save_id + "\title_collection\game_" + string(i) + ".png", games_animframes[i], 0, 1, 0, 0);
    }
    else
    {
        games_thumb[i] = sprite_add("core\assets\default.tbn",0,0,0,0,0);
    }
    ini_close();
};

//Animator
anim_games[i] = 0;

//Clean
cleanmem();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add thumbnails into NX Launcher+
//Buscar caminho...
var file = get_open_filename_ext(file_main_filter, "", global.userdir, file_main_title);
if(file != "")
{
    //SFX
    audio_play_sfx(sfx_nx_notification_general);
    
    //Buscar miniatura...
    var thumb = get_open_filename_ext(file_thumbnail_filter, "", global.userdir, file_thumbnail_title);
    if(thumb != "")
    {
        games_thumb[games_total] = sprite_add(thumb,0,0,1,0,0);
        file_copy(thumb,game_save_id+"title_collection\game_"+string(games_total)+".png");
        audio_play_sfx(sfx_nx_notification_general);
    };
    else
    {
        games_thumb[games_total] = "core\assets\default.tbn"
        audio_play_sfx(sfx_nx_system_error);
    }
    
    //É um ATALHO?
    var scut = show_question(question_shortcut);
    if(scut == 1)
    {
        games_shortcut[games_total] = 1;
    }
    else
    {
        games_shortcut[games_total] = 0;
    }
    
    //It's a ROM?
    var rom_scut = show_question(question_romshortcut)
    if (rom_scut == 1)
    {
        games_rom[games_total] = get_open_filename_ext("", "", global.userdir, "Select a ROM file");
    }
    else
    {
        games_rom[games_total] = "";
    }
    
    //Adicionar jogo
    games_title[games_total] = string_copy(filename_name(file),0,48);
    games_path[games_total] = file;
                    
    //Salvar no diretório
    ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
    ini_write_string("NX_TITLE","title",string_copy(filename_name(file),0,48));
    real(ini_write_string("NX_TITLE","shortcut",string(games_shortcut[games_total])));
    ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
    ini_write_string("NX_TITLE","path",string(file));
    ini_close();
            
    //Incrementar total
    ini_open(game_save_id+"title_collection\_total.ini");
    ini_write_string("NX_TITLE","total",string(games_total+1));
    ini_close();
    games_total++;
    select_index = games_total-1;
  
    //Limpar
    cleanmem();
    
    //Atualizar RPC
    event_user(0);
    
    //Voltar fullscreen... (Se tiver sido definido antes)    
    window_set_fullscreen(fullscreen);
    
    //Alterar nome
    dialog_description = "Set the title's name:"
    keyboard_string = string_copy(filename_name(file),0,48);
    dialog_return = string_copy(filename_name(file),0,48);
    dialog = 1;
    alarm[6] = 1;
};
//Voltar fullscreen... (Se tiver sido definido antes)    
else
{
    audio_play_sfx(sfx_nx_system_error);
    cleanmem();
    window_set_fullscreen(fullscreen);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Discord RPC padrão
if (discord_enable == 1)
{
    if (games_total == 0)
    {
        discord_update_presence("📕 | You don't have any game or application!","🏠 | HOME Menu","icn_nx_launcher","icn_nx_launcher_home");
    }
    else if (games_total == 1)
    {
        discord_update_presence("📕 | You just have one game/application","🏠 | HOME Menu","icn_nx_launcher","icn_nx_launcher_home");
    }
    else if (games_total &gt; 1)
    {
        discord_update_presence("📕 | Choosing between " + string(games_total) + " applications and games","🏠 | HOME Menu","icn_nx_launcher","icn_nx_launcher_home");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NX Launcher+ finisher
///Save settings on a .ini file
if (file_exists(game_save_id + '_data.ini'))
{
    ini_open(game_save_id + '_data.ini');
    theme = ini_write_real("Settings", "theme", theme);
    fullscreen = ini_write_real("Settings", "fullscreen", fullscreen);
    language = ini_write_string("Settings", "lang", language);
    uirender = ini_write_real("Settings", "uirender", uirender);
    discord_enable = ini_write_real("Settings", "discord", discord_enable);
    database_thumbnail = ini_write_real("Settings", "thumb_db", database_thumbnail);
    database_profilepic = ini_write_real("Settings", "profilepic_db", database_profilepic);
    database_wallpaper = ini_write_real("Settings", "wallpaper_db", database_wallpaper);
    update_check = ini_write_real("Launcher Data", "update_check", update_check);
    select_index = ini_write_real("Launcher Data", "position", "0");
    ini_close();
}

//Save on "_theme.ini"
ini_open(game_save_id + "custom_theme\_theme.ini");
theme = real(ini_write_string("NX_THEME", "theme", theme));
ini_close();

///Clean RAM
event_user(14);

///Finish DLLs
//Discord's Rich Presence
if (discord_enable == 1)
{
    discord_free_app();
    discord_free_dll();
}

//Clean Memory
cleanmem();
cleanmem_init(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NX Launcher+ initializer
//Set release mode (only seen in code, varies from Macros)
gml_release_mode(RELEASE_MODE);

//Set fullscreen
alarm[4] = 6;

//Center window (if on "Window Mode")
alarm[3] = 2;

//Load launcher strings by language
language_set();

//Start Clean Memory
cleanmem_init(0);

//Clean Memory
cleanmem();

//Clean inputs
io_clear();

///Check if it's a First Run
ini_open(game_save_id + '_data.ini');
global.first_run = ini_read_real("Launcher Data", "first_run", 1);
ini_close();

///If isn't a first run, load settings and profile from .ini file
if (global.first_run == 0) &amp;&amp; (file_exists(game_save_id + '_data.ini'))
{
    ini_open(game_save_id + '_data.ini');
    theme = ini_read_real("Settings", "theme", "0");
    fullscreen = ini_read_real("Settings", "fullscreen", "0");
    language = ini_read_string("Settings", "lang", "en");
    uirender = ini_read_real("Settings", "uirender", "0");
    discord_enable = ini_read_real("Settings", "discord", "1");
    database_thumbnail = ini_read_real("Settings", "thumb_db", "0");
    database_profilepic = ini_read_real("Settings", "profilepic_db", "0");
    database_wallpaper = ini_read_real("Settings", "wallpaper_db", "0");
    update_check = ini_read_real("Launcher Data", "update_check", "0");
    select_index = ini_read_real("Launcher Data", "position", "0");
    profile_name = ini_read_string("User Data", "profile_name", "User");
    custom_bg = ini_read_string("User Data", "custom_bg", game_save_id + "custom_theme\_wallpaper.png");
    profile_image = ini_read_string("User Data", "profile_icon", game_save_id + "_profile.png");
    profile_icon = sprite_add(profile_image, 0, false, false, 0, 0);
    ini_close();
}
else if (global.first_run == 1) &amp;&amp; not file_exists(game_save_id + '_data.ini')
{
    ini_open(game_save_id + '_data.ini');
    var temp_name = get_string("Please, input your username here: #Obs.: If you don't wanna input nothing, the default username is going to be used.", "User");
    ini_write_string("User Data", "profile_name", temp_name)
    var temp_question_profile = show_question("Do you wanna select a profile picture?#If not, the default one will be used.")
    if (temp_question_profile == 1)
    {
        event_user(2);
    }
    else
    {
        profile_icon = spr_default_profilepicture
    }
    var temp_question_update = show_question("Fenix Launcher has a online update system#Do you want to enable it?")
    if (temp_question_update == 1)
    {
        ini_open(game_save_id + '_data.ini');
        ini_write_real("Launcher Data", "update_check", "1");
    }
    else
    {
        ini_open(game_save_id + '_data.ini');
        ini_write_real("Launcher Data", "update_check", "0");
    }
    var temp_question_update_2 = get_string('Do you prefer Stable, Beta or Custom updates?#If "Custom" is preffered, type your custom update server in the next window#Type: "stable", "beta" or "custom"', "official");
    if (temp_question_update_2 == "stable" || "beta")
    {
    }
    else if (temp_question_update_2 == "custom")
    {
        var temp_question_update_3 = get_string("Set your custom server here:", "https://raw.githubusercontent.com/WodsonKun/Fenix_Database/master");
        if (temp_question_update_3 != "")
        {
            ini_open(game_save_id + '_data.ini');
            ini_write_string("Launcher Data", "db_server", temp_question_update_3);
        }
    }

    //If you have Discord installed, ask about Rich Presence
    if (file_exists(global.userdir + "\AppData\Roaming\Discord\bin\Discord.exe"))
    {
        var temp_question_discord = show_question("Do you wanna enable Discord Rich Presence support?#Rich Presence shows your actual activity on your Discord Desktop Client.")
        if (temp_question_discord == 1)
        {
            discord_enable = 1;
        }
        else
        {
            discord_enable = 0;
        }
        ini_open(game_save_id + '_data.ini');
        discord_enable = ini_write_real("Settings", "discord", discord_enable);
    }
    else
    {
        discord_enable = 0;
        ini_open(game_save_id + '_data.ini');
        discord_enable = ini_write_real("Settings", "discord", discord_enable);
    }
    
    //Set "First Run" equal to "0"
    global.first_run = 0;
    
    //Write default values
    ini_open(game_save_id + '_data.ini');
    theme = ini_write_real("Settings", "theme", "0");
    fullscreen = ini_write_real("Settings", "fullscreen", "0");
    uirender = ini_write_real("Settings", "uirender", "0");
    database_thumbnail = ini_write_real("Settings", "thumb_db", "0");
    database_profilepic = ini_write_real("Settings", "profilepic_db", "0");
    database_wallpaper = ini_write_real("Settings", "wallpaper_db", "0");
    select_index = ini_write_real("Launcher Data", "position", "0");
    global.first_run = ini_write_real("Launcher Data", "first_run", global.first_run);
    ini_close();
}

///Check network connection
switch (os_is_network_connected())
{
    case false:
    global.network_status = 0;
    break;
    
    case true:
    global.network_status = 1;
    break;
}


///Renderização do Display
display_render();

///Add necessary fonts in order to boot Fenix Launcher
//Product Sans (Licensed by Google)
font_popup = font_add("core\fonts\font_popup.ttf", 16, false, false, 32, 255)
font_details = font_add("core\fonts\font_details.ttf", 18, false, false, 32, 255)
font_titles = font_add("core\fonts\font_titles.ttf", 24, false, false, 32, 255)
font_clock = font_add("core\fonts\font_clock.ttf", 24, false, false, 32, 255)

///Create variables for default sounds
snd_sfx_gameselect = sfx_nx_system_gameselect
snd_sfx_gamestart = sfx_nx_system_gamestart
snd_sfx_gamedelete = sfx_nx_system_error

//Carregar assets
event_user(13);

//Impedir seletor de começar fora da lista
if(select_index &gt; games_total-1){

    if(games_total == 0)
        select_index = 0
    else
        select_index = games_total-1;
};

///If internet is connected and Rich Presence was enabled on Settings
discord_rpc = 0;
if (global.network_status == 1) &amp;&amp; (discord_enable == 1)
{
    //In case of having Discord installed, enable Rich Presence
    if (file_exists(global.userdir + "\AppData\Roaming\Discord\bin\Discord.exe"))
    {
        discord_init_dll();
        discord_rpc = 1;
    }
    else
    {
        discord_rpc = 0;
    }
    
    //Check if Rich Presence was enabled and then, start transmission to Discord
    if (file_exists(global.userdir + "\AppData\Roaming\Discord\bin\Discord.exe")) &amp;&amp; (discord_rpc == 1)
    {
        //Connect into app's ClientID
        discord_init_app("123456789123456789");
        
        //Update status into a null value
        discord_update_presence("","","","");
        
        //Update status into real strings
        event_user(0);
    }
};

//Set window caption
window_set_caption(WINDOW_CAPTION);

//Clean inputs
io_clear();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render mode: 1
if (uirender == 1)
{
    event_user(15);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render mode: 0
if (uirender == 0)
{
    event_user(15);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
