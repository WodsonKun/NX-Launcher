<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
is_playing = 0;
delay = 0;
nav_time = 60;
offset = 224;
offset_v = 32;
info_popup = 0;
boot_res = "/max";
boot_wait = "/WAIT";
boot_attach = "";
profile_surf = -1;
global.lang = "EN"

///Mover
move = 0;
move_origin = -1;
move_temp_title = "";
move_temp_path = "";
move_temp_shortcut = 1;
move_temp_thumbnail = noone;

///Controle dos Pais
parental_offset = 0;
parental_unlock = 0;
parental_fade = 3;
parental_fadeicons = 1;

//Analógicos do Gamepad
var _gp;
for(_gp = 0; _gp &lt; 5; _gp += 1){

    gp_stick[_gp,0] = 0;
    gp_stick[_gp,1] = 0;
    gp_stick[_gp,2] = 0;
    gp_stick[_gp,3] = 0;    
};

///In-launcher dialog
dialog = 0;
dialog_description = "";
dialog_return = "";
dialog_inputb = " ";
dialog_filterleft = 1280;
dialog_filterright = 1280;

///Selector's main base colors
col_numb = 0;
col_mod = 0;

///Create a variable to access "User", Fenix Launcher and both "Local" and "Roaming" AppData folders
global.userdir = environment_get_variable("USERPROFILE");
global.launcherdir = global.userdir + "\NX_Launcher_Plus"
global.local_appdatadir = global.userdir + "\AppData\Local"
global.roaming_appdatadir = global.userdir + "\AppData\Roaming"
global.appdata_launcherdir = global.local_appdatadir + "\NX_Launcher_"
global.launcher_coredir = working_directory + "\core"

///Create a variable to access Fenix Launcher's Public GitHub Database server
global.db_server = "https://raw.githubusercontent.com/WodsonKun/Fenix_Database/master"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mover arquivos
//Mover destino para origem...
if(file_exists(game_save_id+"title_collection\game_"+string(select_index)+".ini")){

    //Mover...
    games_title[move_origin] = games_title[select_index];
    games_path[move_origin] = games_path[select_index];
    games_shortcut[move_origin] = games_shortcut[select_index];
    games_thumb[move_origin] = sprite_duplicate(games_thumb[select_index]);
    
    //Deletar sprite de destino
    sprite_delete(games_thumb[select_index]);
    
    //Renomear
    file_rename_fmns(game_save_id+"title_collection\game_"+string(select_index)+".png",game_save_id+"title_collection\game_"+string(move_origin)+".png");
    file_rename_fmns(game_save_id+"title_collection\game_"+string(select_index)+".ini",game_save_id+"title_collection\game_"+string(move_origin)+".ini");

    //Ir para próximo arquivo...
    alarm[11] = 5;
};
//Mover origem (que estava em TMP) para destino...
else{

    //Carregar novos...
    games_title[select_index] = move_temp_title;
    games_path[select_index] = move_temp_path;
    games_shortcut[select_index] = move_temp_shortcut;
    games_thumb[select_index] = sprite_duplicate(move_temp_thumbnail);
    
    //Corrigir nome
    ini_open(game_save_id+"title_collection\game_"+string(move_origin)+".ini")
    games_title[move_origin] = ini_read_string("NX_TITLE","title","???");
    ini_close();
    
    //Deletar sprite de origem
    sprite_delete(move_temp_thumbnail);
    
    //Renomear
    file_rename_fmns(game_save_id+"title_collection\game_TMP.png",game_save_id+"title_collection\game_"+string(select_index)+".png");
    file_rename_fmns(game_save_id+"title_collection\game_TMP.ini",game_save_id+"title_collection\game_"+string(select_index)+".ini");

    //SFX
    audio_play_sfx(sfx_nx_notification_general);
    
    //Limpar
    cleanmem();
    
    //Finalizar
    move = 0;
    move_origin = -1;
    alarm[11] = -1;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Organizar arquivos
if(move_rest &lt; games_total-1)
{

    //Mover...
    games_title[move_rest] = games_title[move_rest+1];
    games_path[move_rest] = games_path[move_rest+1];
    games_shortcut[move_rest] = games_shortcut[move_rest+1];
    games_thumb[move_rest] = sprite_duplicate(games_thumb[move_rest+1]);
    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_rest+1)+".png",game_save_id+"title_collection\game_"+string(move_rest)+".png");
    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_rest+1)+".ini",game_save_id+"title_collection\game_"+string(move_rest)+".ini");

    //Ir para próximo arquivo...
    move_rest++;
    alarm[10] = 5;
};
else{

    //Decrementar
    audio_stop_sound(sfx_nx_notification_general);
    audio_play_sfx(sfx_nx_notification_general);
    games_total--;

    //Salvar total de jogos
    ini_open(game_save_id+"title_collection\_total.ini");
    ini_write_string("NX_TITLE","total",string(games_total));
    ini_close();

    //Limpar
    cleanmem();
    
    //Atualizar RPC
    event_user(0);
    alarm[10] = -1;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alterar miniatura do Jogo
//Buscar caminho...
var mod_file = get_open_filename_ext("Game / Application (.exe, .swf, .url)|*.exe;*.swf;*.url","","", "Select a application");
if(mod_file != ""){

    //SFX
    audio_play_sfx(sfx_nx_notification_general);
    
    //É um ATALHO?
    var mod_scut = show_question(text_addgame);
    if(mod_scut == 1){
        games_shortcut[select_index] = 1;}
    else{
    games_shortcut[select_index] = 0;}
    
    ///---------- ROM Filter ----------
    var name = filename_name(mod_file);
    if (name == "")
    {
        games_rom[games_total] = '';
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom","");
        ini_write_string("NX_TITLE", "rom_file", "");
        ini_close();
    }
    //NES (Mesen)
    else if (name == "Mesen.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_nes_rom_filter, "", global.userdir, file_nes_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //Super Nintendo Entertainment System (Snes9x, ZSNES)
    else if (name == "snes9x.exe") || (name == "snes9x-x64.exe") || (name == "zsnes.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_snes_rom_filter, "", global.userdir, file_snes_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo Game Boy (Original, Color, Advance and Super)
    else if (name == "VisualBoyAdvance.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_gameboy_rom_filter, "", global.userdir, file_gameboy_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo 64 (Project64)
    else if (name == "Project64.exe") || (name == "mupen64plus-ui-console.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_n64_rom_filter, "", global.userdir, file_n64_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo GameCube / Wii (Dolphin)
    else if (name == "Dolphin.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_gcwii_rom_filter, "", global.userdir, file_gcwii_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo 3DS (Citra)
    else if (name == "citra-qt.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_3ds_rom_filter, "", global.userdir, file_3ds_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo WiiU (CemU)
    else if (name == "Cemu.exe")
    {
         //Is it a ROM shortcut?
         var rom_scut = show_question(question_romshortcut);
         if (rom_scut == 1)
         {
            games_rom[games_total] = get_open_filename_ext(file_wiiu_rom_filter, "", global.userdir, file_wiiu_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo Switch (Yuzu, RyujiNX)
    else if (name == "yuzu.exe") || (name == "Ryujinx.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_switch_rom_filter, "", global.userdir, file_switch_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //SEGA Master System / Game Gear / Genesis / 32x / CD (KEGA Fusion)
    else if (name == "Fusion.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_sega_rom_filter, "", global.userdir, file_sega_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    
    //SEGA Saturn
    //SEGA Dreamcast
    //Xbox
    //Xbox 360
    
    
    //PlayStation (PCSX-R, ePSXe)
    else if (name == "pcsxr.exe") || (name == "ePSXe.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psx_rom_filter, "", global.userdir, file_psx_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //PlayStation 2 (PCSX2)
    else if (name == "pcsx2.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_ps2_rom_filter, "", global.userdir, file_ps2_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //PlayStation Portable (PPSSPP, JCPSP)
    else if (name == "PPSSPPWindows.exe") || (name == "PPSSPPWindows64.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psp_rom_filter, "", global.userdir, file_psp_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    else if (name == "jpcsp.jar")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psp_rom_filter, "", global.userdir, file_psp_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", "-u " + string(games_rom[games_total]) + " -r");
        ini_close();
    }
    
    //PlayStation 3 (RPCS3)
    else if (name == "rpcs3.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_ps3_rom_filter, "", global.userdir, file_ps3_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //SFX
    audio_play_sfx(sfx_nx_notification_general);
        
    //Alterar jogo
    games_path[select_index] = mod_file;
                
    //Salvar no diretório
    ini_open(game_save_id+"collection\game_"+string(select_index)+".ini");
    ini_write_string("NX_TITLE","path",string(mod_file));
    ini_write_string("NX_TITLE","title_file",string_copy(filename_name(mod_file),0,48));
    real(ini_write_string("NX_TITLE","shortcut",string(games_shortcut[select_index])));
    ini_close();
            
    //Limpar
    cleanmem();
    
    //Atualizar RPC
    event_user(0);
    
    //Voltar fullscreen... (Se tiver sido definido antes)    
    window_set_fullscreen(fullscreen);
};
//Voltar fullscreen... (Se tiver sido definido antes)    
else
{
    audio_play_sfx(sfx_nx_system_error);
    cleanmem();
    window_set_fullscreen(fullscreen);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Buscar miniatura...
    var mod_thumb = get_open_filename_ext("Thumbnail Image (256x256)|*.png;*.jpg;*.jpeg","", game_save_id + "thumbnails", "Select a thumbnail image");
    if(mod_thumb != ""){
        
        sprite_delete(games_thumb[select_index])
        file_delete_fmns(game_save_id+"collection\game_"+string(select_index)+".png");
        games_thumb[select_index] = sprite_add(mod_thumb,0,0,1,0,0);
        file_copy_fmns(mod_thumb,game_save_id+"collection\game_"+string(select_index)+".png");
    };
    else
    {
        audio_play_sfx(sfx_nx_system_error);
        cleanmem();
        window_set_fullscreen(fullscreen);
    };
    
    //Atualizar RPC
    event_user(11);
    
    //Voltar fullscreen... (Se tiver sido definido antes)    
    window_set_fullscreen(fullscreen);
//Voltar fullscreen... (Se tiver sido definido antes)    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add thumbnails into NX Launcher+
//1: Search for a title
var file = get_open_filename_ext(file_main_filter, "", global.userdir, file_main_title);
if(file != "")
{
    //Play "General" SFX
    audio_play_sfx(sfx_nx_notification_general);
    
    //Buscar miniatura...
    var thumb = get_open_filename_ext(file_thumbnail_filter, "", global.userdir, file_thumbnail_title);
    if(thumb != "")
    {
        games_thumb[games_total] = sprite_add(thumb,0,0,0,0,0);
        file_copy(thumb,game_save_id+"title_collection\game_"+string(games_total)+".png");
        audio_play_sfx(sfx_nx_notification_general);
    };
    else
    {
        games_thumb[games_total] = sprite_add("core\assets\default.tbn", 0, 0, 0, 0, 0);
        audio_play_sfx(sfx_nx_system_error);
    }
    
    //É um ATALHO?
    var scut = show_question(question_shortcut);
    if(scut == 1)
    {
        games_shortcut[games_total] = 1;
    }
    else
    {
        games_shortcut[games_total] = 0;
    }
    
    ///---------- ROM Filter ----------
    var name = filename_name(file);
    if (name == "")
    {
        games_rom[games_total] = '';
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom","");
        ini_write_string("NX_TITLE", "rom_file", "");
        ini_close();
    }
    //NES (Mesen)
    else if (name == "Mesen.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_nes_rom_filter, "", global.userdir, file_nes_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_close();
    }
    
    //Super Nintendo Entertainment System (Snes9x, ZSNES)
    else if (name == "snes9x.exe") || (name == "snes9x-x64.exe") || (name == "zsnes.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_snes_rom_filter, "", global.userdir, file_snes_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo Game Boy (Original, Color, Advance and Super)
    else if (name == "VisualBoyAdvance.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_gameboy_rom_filter, "", global.userdir, file_gameboy_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo 64 (Project64)
    else if (name == "Project64.exe") || (name == "mupen64plus-ui-console.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_n64_rom_filter, "", global.userdir, file_n64_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo GameCube / Wii (Dolphin)
    else if (name == "Dolphin.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_gcwii_rom_filter, "", global.userdir, file_gcwii_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo 3DS (Citra)
    else if (name == "citra-qt.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_3ds_rom_filter, "", global.userdir, file_3ds_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo WiiU (CemU)
    else if (name == "Cemu.exe")
    {
         //Is it a ROM shortcut?
         var rom_scut = show_question(question_romshortcut);
         if (rom_scut == 1)
         {
            games_rom[games_total] = get_open_filename_ext(file_wiiu_rom_filter, "", global.userdir, file_wiiu_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Nintendo Switch (Yuzu, RyujiNX)
    else if (name == "yuzu.exe") || (name == "Ryujinx.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_switch_rom_filter, "", global.userdir, file_switch_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //SEGA Master System / Game Gear / Genesis / 32x / CD (KEGA Fusion)
    else if (name == "Fusion.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_sega_rom_filter, "", global.userdir, file_sega_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
        ini_write_string("NX_TITLE","rom",string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    
    //SEGA Saturn
    //SEGA Dreamcast
    //Xbox
    //Xbox 360
    
    
    //PlayStation (PCSX-R, ePSXe)
    else if (name == "pcsxr.exe") || (name == "ePSXe.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psx_rom_filter, "", global.userdir, file_psx_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //PlayStation 2 (PCSX2)
    else if (name == "pcsx2.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_ps2_rom_filter, "", global.userdir, file_ps2_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //PlayStation Portable (PPSSPP, JCPSP)
    else if (name == "PPSSPPWindows.exe") || (name == "PPSSPPWindows64.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psp_rom_filter, "", global.userdir, file_psp_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    else if (name == "jpcsp.jar")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_psp_rom_filter, "", global.userdir, file_psp_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", "-u " + string(games_rom[games_total]) + " -r");
        ini_close();
    }
    
    //PlayStation 3 (RPCS3)
    else if (name == "rpcs3.exe")
    {
        //É um atalho para ROMs?
        var rom_scut = show_question(question_romshortcut);
        if (rom_scut == 1)
        {
            games_rom[games_total] = get_open_filename_ext(file_ps3_rom_filter, "", global.userdir, file_ps3_rom_name);
        }
        else
        {
            games_rom[games_total] = "";
        }
        ini_open(game_save_id + "title_collection\game_" + string(games_total)+".ini");
        ini_write_string("NX_TITLE", "rom", string(games_rom[games_total]));
        ini_write_string("NX_TITLE", "rom_file", string_copy(filename_name(games_rom[games_total]), 0, 999));
        ini_close();
    }
    
    //Adicionar jogo
    games_title[games_total] = string_copy(filename_name(file),0,48);
    games_path[games_total] = file;
    
    //Alterar nome
    dialog_description = "Set the title's name:"
    keyboard_string = string_copy(filename_name(file),0,48);
    dialog_return = string_copy(filename_name(file),0,48);
    dialog = 1;
    alarm[6] = 1;
                    
    //Salvar no diretório
    ini_open(game_save_id+"title_collection\game_"+string(games_total)+".ini");
    ini_write_string("NX_TITLE","title",string_copy(filename_name(file),0,48));
    ini_write_string("NX_TITLE","title_file",string_copy(filename_name(file),0,48));
    real(ini_write_string("NX_TITLE","shortcut",string(games_shortcut[games_total])));
    ini_write_string("NX_TITLE","path",string(file));
    ini_close();
            
    //Incrementar total
    ini_open(game_save_id+"title_collection\_total.ini");
    ini_write_string("NX_TITLE","total",string(games_total+1));
    ini_close();
    games_total++;
    select_index = games_total-1;
  
    //Limpar
    cleanmem();
    
    //Atualizar RPC
    event_user(11);
    
    //Voltar fullscreen... (Se tiver sido definido antes)    
    window_set_fullscreen(fullscreen);
};
//Voltar fullscreen... (Se tiver sido definido antes)    
else
{
    audio_play_sfx(sfx_nx_system_error);
    cleanmem();
    window_set_fullscreen(fullscreen);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alterar nome do jogo
if(dialog == 1)
    alarm[6] = 1;
else
{
    //Adicionar jogo
    games_title[select_index] = dialog_return;

    //Salvar a alteração
    ini_open(game_save_id+"title_collection\game_"+string(select_index)+".ini");
    ini_write_string("NX_TITLE","title",string(dialog_return));
    ini_close();
    cleanmem();
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dialog effect
if(dialog == 1)
{
    if(dialog_inputb == " ")
    {
        dialog_inputb = "_";
    }
    else
    {
        dialog_inputb = " ";
    }
    alarm[5] = 15;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set fullscreen
//Fullscreen
window_set_fullscreen(fullscreen);
if (fullscreen == 0)
{
    //Restore size/position
    window_set_position(temp_x,temp_y);
    window_set_size(temp_w,temp_h);
    
    //Center window
    alarm[3] = 2;
};
else
{
    window_set_position(-4000,-4000);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window
window_center();

//Store size/position
temp_x = window_get_x();
temp_y = window_get_y();
temp_w = window_get_width();
temp_h = window_get_height();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resume the launcher
//1: Set the launcher into "Launcher Mode"
is_playing = 0;
display_set_ui_visibility(1);

//2: Reload the launcher's assets
event_user(0);

//3: Restore position and size
alarm[4] = 2;

//4: Delete .bat file used to launch the title
file_delete_fmns(game_save_id+"gameboot.bat");

//5: Reconnect into Default RPC application
discord_presence_clear();
discord_presence_init("518968328744861704");

//6: Update Rich Presence
event_user(11);

//7: Clean RAM (performance)
cleanmem();

//8: Play "HOME Menu" SFX
audio_play_sfx(sfx_nx_system_home);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start the title
//1: Clean RAM (once more)
cleanmem();

//2: Clear input (useful)
io_clear();

//3: Clean assets (RAM)
event_user(1);

//3: Start the .bat (And wait until it finishes...)
execute_shell('"'+game_save_id+'gameboot.bat"',1,1);

//After finishing the title, proceed into loading launcher's assets and stuff
alarm[2] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prepare to initialize a title
//1: Set the launcher on "Play Mode"
is_playing = 1;
display_set_ui_visibility(0);

//2: If not in fullscreen, store window's position and size
if(fullscreen == 0)
{
    temp_x = window_get_x();
    temp_y = window_get_y();
    temp_w = window_get_width();
    temp_h = window_get_height();
};

//3: Hide the launcher
window_set_position(-4000,-4000);
window_set_size(16,16);

//4: Discord's RPC Status
init_rpc_status();

//5: Create a .bat file that directs into the game's folder (prevents fails)
var test = file_text_open_write(game_save_id+"gameboot.bat")
file_text_write_string(test,filename_drive(games_path[select_index]));
file_text_writeln(test);
file_text_write_string(test,"cd "+filename_path(games_path[select_index])+"");
file_text_writeln(test);
ini_open(game_save_id + "title_collection\game_" + string(select_index) + ".ini");
games_title_file[select_index] = ini_read_string("NX_TITLE","title_file","");
if (boot_attach != "")
{
    switch (games_title_file[select_index])
    {
        case ("Dolphin.exe"):   file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+"-e "+'"'+boot_attach+'"');    break;
        case ("Cemu.exe"):  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+"-g "+'"'+boot_attach+'"');    break;
        case ("pcsxr.exe"):  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+"-nogui "+'" '+"-cdfile "+'"'+boot_attach+'"');    break;
        case ("ePSXe.exe"):  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+'" '+"-loadbin "+'"'+boot_attach+'"');    break;
        default:  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+'"'+boot_attach+'"');   break;
    }
}
else
{
    file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'"');
}
ini_close();
file_text_writeln(test);
file_text_close(test);

//6: Clear RAM (better for performance)
cleanmem();

//Proceed into launching the title
alarm[1] = 4;

/*if (games_title_file[select_index] != "")
    {
        switch (games_title_file[select_index])
        {
            case ("Dolphin.exe"):   file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+"-e "+'"'+boot_attach+'"');    break;
            case ("Cemu.exe"):  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+"-g "+'"'+boot_attach+'"');    break;
            case ("pcsxr.exe"):  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+"-nogui "+'" '+"-cdfile "+'"'+boot_attach+'"');    break;
            case ("ePSXe.exe"):  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+'" '+"-loadbin "+'"'+boot_attach+'"');    break;
            default:  file_text_write_string(test,'start "Fenix_Software" '+boot_res+''+boot_wait+'"'+filename_name(games_path[select_index])+'" '+'"'+boot_attach+'"');   break;
        }
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage and handle HOME Menu movement and actions
if(delay &gt; 0)
    delay--;

//Ignorar quando suspenso
if(is_playing == 1)
||(delay &gt; 0)
||(alarm[7] != -1)
||(alarm[8] != -1)
||(alarm[9] != -1)
||(alarm[10] != -1)
||(alarm[11] != -1)
    exit;

//Clean Memory
cleanmem();

//Inserir texto
if(dialog == 1){

    //Animação de transição (Começo)
    if(dialog_filterright &lt; 1280)
        dialog_filterright += 128;
    dialog_filterleft = -1;
    
    if(window_has_focus()){
    
        //Confirmar
        if((keyboard_check_pressed(vk_enter))
        ||(mouse_check_button_released(mb_left)))
        &amp;&amp;(dialog_filterright &gt; 1279)
        &amp;&amp;!(point_in_rectangle(mouse_x,mouse_y,1063,41,1170+34,41+34)){
        
            delay = 5;
            audio_play_sfx(sfx_nx_system_tick);
            dialog = 0;
            exit;
        };
        
        //Clipboard
        if(keyboard_check(vk_control)){
        
            //Colar
            if(keyboard_check_pressed(ord("V"))){
            
                audio_play_sfx(sfx_nx_system_tick);
                keyboard_string = string_copy(clipboard_get_text(),0,48);
                dialog_return = string_copy(clipboard_get_text(),0,48);
            };
            //Copiar
            else if(keyboard_check_pressed(ord("C"))){
            
                audio_play_sfx(sfx_nx_system_tick);
                clipboard_set_text(dialog_return);
            };
        };
        else{
        
            //SFX de tecla
            if(keyboard_check_pressed(vk_anykey))
                audio_play_sfx(sfx_nx_system_tick);
            
            //Trocar caracteres inválidos
            if(keyboard_check(vk_anykey)){
            
                var stg_a,stg_b,stg_c;
                stg_a = string_copy(keyboard_string,0,48);
                stg_b = string_replace(stg_a,'#',"");
                stg_c = string_replace(stg_b,"'","");
                keyboard_string = stg_c;
                dialog_return = stg_c;
            };
        };
    }
        
    //Efeito
    if(alarm[5] == -1)
    {
        alarm[5] = 15;
        exit;
    }
};
else
{
    //Animação de transição (Fim)
    if(dialog_filterright &gt;= 1280)
    {
        if(dialog_filterleft &lt; 1280)
        {
            dialog_filterleft += 128;
        }
        else
        {
            dialog_filterright = -1;
            dialog_filterleft = -1;
        };
    };
};
    
//WASD
keyboard_set_map(ord("W"),vk_up);
keyboard_set_map(ord("A"),vk_left);
keyboard_set_map(ord("S"),vk_down);
keyboard_set_map(ord("D"),vk_right);

//Gamepad
///gamepad_input()
var gp_count;
for(gp_count = 0; gp_count &lt; 5; gp_count += 1)
{    
    if(gamepad_is_connected(gp_count))
    &amp;&amp;(dialog == 0)
    {     
        //Up (Stick)
        if(gp_stick[gp_count,0] == 0)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislv) &lt;= -0.5){
        
            gp_stick[gp_count,0] = 1;
            keyboard_key_press(vk_up);
        };
        else if(gp_stick[gp_count,0] == 1)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislv) &gt; -0.5){
        
            gp_stick[gp_count,0] = 0;
            keyboard_key_release(vk_up);
        };
    
        //Down (Stick)
        if(gp_stick[gp_count,1] == 0)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislv) &gt;= 0.5){
        
            gp_stick[gp_count,1] = 1;
            keyboard_key_press(vk_down);
        };
        else if(gp_stick[gp_count,1] == 1)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislv) &lt; 0.5){
        
            gp_stick[gp_count,1] = 0;
            keyboard_key_release(vk_down);
        };
        
        //Left (Stick)
        if(gp_stick[gp_count,2] == 0)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislh) &lt;= -0.5){
        
            gp_stick[gp_count,2] = 1;
            keyboard_key_press(vk_left);
        };
        else if(gp_stick[gp_count,2] == 1)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislh) &gt; -0.5){
        
            gp_stick[gp_count,2] = 0;
            keyboard_key_release(vk_left);
        };
    
        //Right (Stick)
        if(gp_stick[gp_count,3] == 0)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislh) &gt;= 0.5){
        
            gp_stick[gp_count,3] = 1;
            keyboard_key_press(vk_right);
        };
        else if(gp_stick[gp_count,3] == 1)
        &amp;&amp;(gamepad_axis_value(gp_count,gp_axislh) &lt; 0.5){
        
            gp_stick[gp_count,3] = 0;
            keyboard_key_release(vk_right);
        };
    
        //Up - Começo da lista
        if(gamepad_button_check(gp_count,gp_padu))
            keyboard_key_press(vk_up);
        else if(gamepad_button_check_released(gp_count,gp_padu))
            keyboard_key_release(vk_up);
            
        //Down - Fim da lista
        if(gamepad_button_check(gp_count,gp_padd))
            keyboard_key_press(vk_down);
        else if(gamepad_button_check_released(gp_count,gp_padd))
            keyboard_key_release(vk_down);
    
        //Left / L
        if(gamepad_button_check(gp_count,gp_padl))
            keyboard_key_press(vk_left);
        else if(gamepad_button_check_released(gp_count,gp_padl))
            keyboard_key_release(vk_left);
            
        if(gamepad_button_check(gp_count,gp_shoulderl))
            keyboard_key_press(vk_left);
        else if(gamepad_button_check_released(gp_count,gp_shoulderl))
            keyboard_key_release(vk_left);
        
        //Right / R
        if(gamepad_button_check(gp_count,gp_padr))
            keyboard_key_press(vk_right);
        else if(gamepad_button_check_released(gp_count,gp_padr))
           keyboard_key_release(vk_right);
           
        if(gamepad_button_check(gp_count,gp_shoulderr))
            keyboard_key_press(vk_right);
        else if(gamepad_button_check_released(gp_count,gp_shoulderr))
           keyboard_key_release(vk_right);

        //Generico (DirecInput)
        if(gp_count == 4)
        {
            //1, 4 e Select - Mover
            if(gamepad_button_check_pressed(gp_count,gp_face1))
                keyboard_key_press(vk_shift);
            else if(gamepad_button_check_released(gp_count,gp_face1))
                keyboard_key_release(vk_shift);
                
            if(gamepad_button_check_pressed(gp_count,gp_face4))
                keyboard_key_press(vk_shift);
            else if(gamepad_button_check_released(gp_count,gp_face4))
                keyboard_key_release(vk_shift);
    
            if(gamepad_button_check_pressed(gp_count,gp_select))
                keyboard_key_press(vk_shift);
            else if(gamepad_button_check_released(gp_count,gp_select))
                keyboard_key_release(vk_shift);
                                
            //2 e Start - Iniciar
            if(gamepad_button_check_pressed(gp_count,gp_face2))
                keyboard_key_press(vk_enter);
            else if(gamepad_button_check_released(gp_count,gp_face2))
                keyboard_key_release(vk_enter);
                
            if(gamepad_button_check_pressed(gp_count,gp_start))
                keyboard_key_press(vk_enter);
            else if(gamepad_button_check_released(gp_count,gp_start))
                keyboard_key_release(vk_enter);
            
            //3 - Cancelar
            if(gamepad_button_check_pressed(gp_count,gp_face3))
                keyboard_key_press(vk_escape);
            else if(gamepad_button_check_released(gp_count,gp_face3))
                keyboard_key_release(vk_escape);
        };    
        //Joy-Cons / Nintendo Switch Pro Controller (XInput) [também XBOX]
        else
        {
            //X, Y e Select - Mover
            if(gamepad_button_check_pressed(gp_count,gp_face3))
                keyboard_key_press(vk_shift);
            else if(gamepad_button_check_released(gp_count,gp_face3))
                keyboard_key_release(vk_shift);
                
            if(gamepad_button_check_pressed(gp_count,gp_face4))
                keyboard_key_press(vk_shift);
            else if(gamepad_button_check_released(gp_count,gp_face4))
                keyboard_key_release(vk_shift);
    
            if(gamepad_button_check_pressed(gp_count,gp_select))
                keyboard_key_press(vk_shift);
            else if(gamepad_button_check_released(gp_count,gp_select))
                keyboard_key_release(vk_shift);
                                
            //A e Start - Iniciar
            if(gamepad_button_check_pressed(gp_count,gp_face2))
                keyboard_key_press(vk_enter);
            else if(gamepad_button_check_released(gp_count,gp_face2))
                keyboard_key_release(vk_enter);
                
            if(gamepad_button_check_pressed(gp_count,gp_start))
                keyboard_key_press(vk_enter);
            else if(gamepad_button_check_released(gp_count,gp_start))
                keyboard_key_release(vk_enter);
            
            //B - Cancelar
            if(gamepad_button_check_pressed(gp_count,gp_face1))
                keyboard_key_press(vk_escape);
            else if(gamepad_button_check_released(gp_count,gp_face1))
                keyboard_key_release(vk_escape);
        };
    };
    if(gp_count &gt; 4)
    {
        gp_count = 0;
    }
};

//Cor do seletor de jogos
if(col_mod == 0){

    if(col_numb &lt; 1)
        col_numb += 0.05;
    else
        col_mod =! col_mod;
};
else{

    if(col_numb &gt; 0)
        col_numb -= 0.05;
    else
        col_mod =! col_mod;
};

//Navegação da lista de jogos
if(alarm[0] == -1)&amp;&amp;(dialog == 0)
&amp;&amp;(games_total &gt; 0){

    //Mover jogo
    if(keyboard_check_pressed(vk_shift))
    {
        move =! move;
        move_origin = select_index;
    };
    
    //Navegação rápida (Loop)
    if(keyboard_check(vk_right))
    {
        //Intervalo
        if(nav_time &gt; 0)
            nav_time--;
        else
        {
            //Delay em frames
            nav_time = 5;
            
            //Próximo
            if(select_index &lt; games_total-1)
            {
                select_index++;
                audio_play_sfx(sfx_nx_system_gameselect);
            };
        };
    };
    else if(keyboard_check(vk_left))
    {
        //Intervalo
        if(nav_time &gt; 0)
            nav_time--;
        else
        {    
            //Delay em frames
            nav_time = 5;
                    
            //Anterior
            if(select_index &gt; 0)
            {
                select_index--;
                audio_play_sfx(sfx_nx_system_gameselect);
            };
        };
    };
    else
    {
        nav_time = 30;
    }

    //Normal
    if(keyboard_check_pressed(vk_right))
    {
        offset_v = 0;
        
        //Próximo
        if(select_index &lt; games_total-1)
        {
            select_index++;
            audio_play_sfx(sfx_nx_system_gameselect);
        };
        else
        {
            audio_play_sfx(sfx_nx_system_gameborder);
        }
    };
    else if(keyboard_check_pressed(vk_left))
    {
        offset_v = 0;
        
        //Anterior
        if(select_index &gt; 0)
        {
            select_index--;
            audio_play_sfx(sfx_nx_system_gameselect);
        };
        else
        {
            audio_play_sfx(sfx_nx_system_gameborder);
        }
    };
    else if(keyboard_check_pressed(vk_down))
    {
        offset_v = 0;
        
        //Fim
        select_index = games_total-1;
        audio_play_sfx(sfx_nx_system_gameborder);
    };
    else if(keyboard_check_pressed(vk_up))
    {
        offset_v = 0;
        
        //Começo
        select_index = 0;
        audio_play_sfx(sfx_nx_system_gameborder);
    };
    else if(keyboard_check_pressed(vk_enter))
    {    
        if(keyboard_check(vk_alt))
        {
            //Fullscreen
            audio_play_sfx(sfx_nx_notification_general);
            fullscreen =! fullscreen;
            alarm[4] = 3;
            cleanmem();
        };
        else
        {
            //Confirmar após mover
            if(move == 1)
            {
                //Se for local diferente...
                if(select_index != move_origin)
                {
                    //SFX
                    audio_play_sfx(sfx_nx_system_tick);
                    games_title[select_index] = "Moving...";
                    
                    //Copiar
                    move_temp_title = games_title[move_origin];
                    move_temp_path = games_path[move_origin];                  
                    move_temp_shortcut = games_shortcut[move_origin];
                    move_temp_thumbnail = sprite_duplicate(games_thumb[move_origin]);
                    
                    //Deletar de origem
                    sprite_delete(games_thumb[move_origin]);
                    
                    //Renomear arquivo de origem temporariamente...
                    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_origin)+".ini",game_save_id+"title_collection\game_TMP.ini");
                    file_rename_fmns(game_save_id+"title_collection\game_"+string(move_origin)+".png",game_save_id+"title_collection\game_TMP.png");
                    
                    //Mover arquivo destino para de origem...
                    alarm[11] = 10;
                };
                else
                {
                    //SFX
                    audio_play_sfx(sfx_nx_system_tick);
                    
                    //Finalizar
                    move = 0;
                    move_origin = -1;
                    cleanmem();
                };
            };
            else{
            
                //Iniciar jogo
                if(games_total &gt; 0)
                &amp;&amp;(file_exists_fmns(games_path[select_index])){
                
                    //Iniciar máximizado
                    if(fullscreen == 1)
                        boot_res = "/max ";
                    else
                        boot_res = "";
                        
                    //Iniciar e suspender
                    if(games_shortcut[select_index] == 0)
                        boot_wait = "/WAIT ";
                    else
                        boot_wait = "";
                        
                    //ROM
                    ini_open(game_save_id + "title_collection\game_" + string(select_index) + ".ini");
                    games_rom[select_index] = ini_read_string("NX_TITLE","rom","");
                    if (games_rom[select_index] == "")
                    {
                        boot_attach = "";
                    }
                    else if (games_rom[select_index] != "")
                    {
                        boot_attach = string(games_rom[select_index]);
                    }
                    ini_close();
                
                    window_set_fullscreen(0);
                    audio_play_sfx(sfx_nx_system_gamestart);
                    alarm[0] = 15;
                };
            };
        };
    };       
};
        
//Deletar jogo
if (move == 1)
{
    if(keyboard_check_released(vk_delete))
    ||(gamepad_button_check_released(1, gp_face3))
    &amp;&amp;(games_total &gt; 0)
    &amp;&amp;(alarm[10] == -1)
    {
        //Deletar sprite
        sprite_delete(games_thumb[select_index]);
        
        //Nulo
        games_title[select_index] = "Deleting...";
        
        //Deletar arquivos
        file_delete_fmns(game_save_id+"title_collection\game_"+string(select_index)+".png");
        file_delete_fmns(game_save_id+"title_collection\game_"+string(select_index)+".ini");
                          
        //Deletar ultimo (sendo o ultimo selecionado)
        if(select_index == games_total-1)
        &amp;&amp;(select_index &gt; 0)
        {
            games_path[select_index] = "";
                
            //Decrementar
            audio_play_sfx(sfx_nx_system_error);
            games_total--;            
            select_index--;
                
            //Salvar total de jogos
            ini_open(game_save_id+"title_collection\_total.ini");
            ini_write_string("NX_TITLE","total",string(games_total));
            ini_close();
            
            //Atualizar RPC
            event_user(11);
            cleanmem();
            move = 0;
        };
        //Mover tudo
        else
        {
            audio_play_sound(sfx_nx_system_loading,0,0);
            move_rest = select_index;
            alarm[10] = 10;
            cleanmem();
        };
    };
};

//Fullscreen
if(keyboard_check_released(vk_f10))
{
    fullscreen =! fullscreen;
    alarm[4] = 3;
    cleanmem();
};
    
//Screenshot
var nx_screenshot;
if(keyboard_check_released(vk_f12))
{
    nx_screenshot = get_save_filename_ext("Screenshot|*.png", "", working_directory, "Save a screenshot");
    if nx_screenshot != ""
    {
        window_set_fullscreen(0);
        screen_save(nx_screenshot);
        alarm[4] = 2;
        cleanmem();
    }
};

//Terminate launcher
if (keyboard_check_released(vk_escape))
{
    game_end();
}

///Mouse-featured actions
if(mouse_check_button_released(mb_left)) || (mouse_check_button_released(mb_right))
{
    if (ui_buttons == 1)
    {
        //Add a thumbnail
        if (point_in_rectangle(mouse_x, mouse_y, 144, 42, 194, 92))
        {
            window_set_fullscreen(0);
            alarm[7] = 2;
        }
        
        if (games_total &gt; 0)
        {
            //Change a thumbnail's icon
            if (point_in_rectangle(mouse_x, mouse_y, 210, 42, 260, 92))
            {
                window_set_fullscreen(0);
                alarm[8] = 2;
            }
            
            //Change a thumbnail's name
            if (point_in_rectangle(mouse_x, mouse_y, 276, 42, 276+50, 92))
            &amp;&amp;(games_total &gt; 0)
            &amp;&amp;(alarm[6] == -1)
            {
                if(filename_ext(games_path[select_index]) == ".exe")
                {
                    //Alterar nome
                    audio_play_sfx(sfx_nx_notification_general);
                    draw_set_font(fnt_nsw_ntlg_24);
                    dialog_description = "Change the title's name:"
                    draw_set_font(fnt_nsw_udsg_18);
                    keyboard_string = games_title[select_index];
                    dialog_return = games_title[select_index];
                    dialog = 1;
                    alarm[6] = 1;
                };
            }
            
            //Change a thumbnail's executable
            if (point_in_rectangle(mouse_x, mouse_y, 342, 42, 342+50, 92))
            {
                window_set_fullscreen(0);
                alarm[9] = 2;
            }
        }
    }
    
    //Open profile page
    if(point_in_rectangle(mouse_x,mouse_y,32,30,(32+64),(30+64)))
    {
        room_goto(rm_profilepage);
    }
    
    //Controller test
    if(point_in_rectangle(mouse_x,mouse_y, 16, (136+98+98+98), 16+98, (136+98+98+98+98)))
    {
        room_goto(rm_controllerpage);
    }
    
    //Open Settings
    if(point_in_rectangle(mouse_x, mouse_y, 16, 528, 16+98, 528+98))
    {
        room_goto(rm_settingspage);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stores strings of the launcher
///Languages
switch (global.lang)
{
    //EN: English (United States)
    case "EN":
    
    //Setup Wizard
    str_setupwizard_title = "Setup Wizard";
    str_setupwizard_step1 = "Step 1: Create your profile";
    str_setupwizard_step2 = "Step 2: Enable Online Updates for the launcher";
    str_setupwizard_step3 = "Step 3: Setup your Discord's Rich Presence status";
    str_setupwizard_finished = "Finished!";
    str_setupwizard_desc1 = "Change profile picture";
    str_setupwizard_desc2 = "Please, input your username here:";
    str_setupwizard_desc3 = "Do you wanna enable online updates?";
    str_setupwizard_desc4 = "We detected that you have Discord installed#on your computer.##Do you wanna enable Rich Presence?";
    str_setupwizard_quest1 = "Yup, sure!";
    str_setupwizard_quest2 = "No, thanks.";
    str_setupwizard_text = "Congrats! You've just finished NX Launcher+'s Setup Wizard!#Feel free to check our info in the About screen on Settings.#I hope you enjoy and make good use of this launcher.##Sincerely,#WodsonKun";
    
    //[HOME Menu Strings]
    home_main = "HOME Menu"
    home_news = "News"
    home_freeshop = "Ninty FreeShop"
    home_thumbadd = "Add thumbnails"
        
    //[HOME Menu Pop-Up Strings]
    home_profilepage_open = profile_name + "'s page"
    home_change_background = "Change background"
    home_change_lighttheme = "Change to Light Theme"
    home_change_darktheme = "Change to Dark Theme"
    home_change_music = "Change launcher's music"
    home_change_theme = "Change theme"
    home_folder_opener = "Open data folder"
    
    //[Settings Strings]
    settings_main = "Settings"
    
    //[Command Strings]
    command_start = "Start"
    command_edit = "Edit Mode"
    command_delete = "Delete"
    command_move = "Move to Left / Right"
    command_normal = "Normal Mode"
    command_place = "Place"
        
    //[Question Strings]
    question_shortcut = "Do you want turn this game/application into a shortcut?#This option is useful for common applications or that already have their own launcher#Obs.: If you turn this game a shortcut, it will not run in Game Mode."
    question_romshortcut = "Do you want turn this title into a ROM shortcut?#It will run the ROM directly from the launcher."
    
    //[File Strings]
    file_main_filter = "Windows Game / Application (.exe)|*.exe|Steam Game / Application (.url)|*.url|Java Game / Application (.jar)|*.jar"
    file_main_title = "Select a game, app or ROM"
    file_emulator_filter = "Emulator (.exe)|*.exe"
    file_emulator_title = "Select your emulator's path"
    file_thumbnail_filter = "Thumbnail Images (256x256)|*.png"
    file_thumbnail_title = "Select a thumbnail image"
    file_wallpaper_filter = "Wallpapers (1280x720)|*.png"
    file_wallpaper_title = "Choose a wallpaper"
    file_screenshot_filter = "Fenix's Screenshot (.png)|*.png"
    file_screenshot_title = "Save your screenshot"
    file_theme_filter = "Custom Theme (.thm)|*.thm"
    file_theme_name = "Select a custom theme"
    
    //[Emulator Filter Strings]
    //Nintendo Entertainment System
    file_nes_rom_filter = "NES ROMs (.nes)|*.nes|Famicom Disk System ROMs (.fds)|*.fds"
    file_nes_rom_name = "Select a Nintendo Entertainment System or a Famicom Disk System ROM"
    //Super Nintendo Entertainment System
    file_snes_rom_filter = "SNES ROMs (.smc, .sfc)|*.smc;*.sfc"
    file_snes_rom_name = "Select an Super Nintendo Entertainment System ROM"
    //Nintendo Game Boy (Original, Color, Advance and Super)
    file_gameboy_rom_filter = "Nintendo Game Boy (.gb)|*.gb|Nintendo Game Boy Color (.gbc)|*.gbc|Nintendo Game Boy (.gba, .agb)|*.gba;.*agb|Nintendo Super Game Boy (.sgb)|*.sgb"
    file_gameboy_rom_name = "Select a Nintendo Game Boy (Original, Color, Advance or Super) ROM"
    //Nintendo 64
    file_n64_rom_filter = "Nintendo 64 ROMs (.n64, .z64, .v64)|*.n64;*.z64;*.v64"
    file_n64_rom_name = "Select a Nintendo 64 ROM"
    //Nintendo GameCube / Wii
    file_gcwii_rom_filter = "Nintendo GameCube / Wii ROMs (.iso, .nkit.iso, .wbfs, .gcz)|*.iso;*.nkit.iso;*.wbfs;*.gcz"
    file_gcwii_rom_name = "Select a Nintendo GameCube / Wii ROM"
    //Nintendo 3DS
    file_3ds_rom_filter = "Nintendo 3DS ROMs (.3ds, .3dsx, .cci, .cxi)|*.3ds;*.3dsx;*.cci;*.cxi"
    file_3ds_rom_name = "Select a Nintendo 3DS ROM"
    //Nintendo WiiU
    file_wiiu_rom_filter = "Nintendo WiiU ROMs (.rpx)|*.rpx"
    file_wiiu_rom_name = "Select a Nintendo WiiU ROM"
    //Nintendo Switch
    file_switch_rom_filter = "Nintendo Switch ROMs (.xci, .nro, .nso)|*.xci;*.nro;*.nso"
    file_switch_rom_name = "Select an Nintendo Switch ROM"
    //SEGA Master System / Game Gear / Genesis / 32x / CD
    file_sega_rom_filter = "SEGA Master System (.sms)|*.sms|SEGA Genesis / Mega Drive / CD /32x (.gen, .bin, .cue)|*.gen;*.bin;*.cue|SEGA Game Gear (.gg)|*.gg"
    file_sega_rom_name = "Select a SEGA Master System / Game Gear / Genesis / 32x / CD ROM"
    //PlayStation
    file_psx_rom_filter = "PSX ROMs (.iso, .bin, .cue, .img, .exe)|*.iso;*.bin;*.cue;*.img;*.exe"
    file_psx_rom_name = "Select an PlayStation ROM"
    //PlayStation Portable
    file_psp_rom_filter = "PSP ROMs (.iso, .cso, .PBP, .elf)|*.iso;*.cso;*.PBP;*.elf"
    file_psp_rom_name = "Select an PlayStation Portable ROM"
    //PlayStation 2
    file_ps2_rom_filter = "PS2 ROMs (.iso, .elf)|*.iso;*.elf"
    file_ps2_rom_name = "Select an PlayStation 2 ROM"
    //PlayStation 3
    file_ps3_rom_filter = "PS3 ROMs (.BIN, .elf, .self)|*.BIN;*.elf;*.self"
    file_ps3_rom_name = "Select an PlayStation 3 ROM"
    break;
    
    //ES: Spanish
    case "ES":
    break;
    
    //FR: French
    case "FR":
    break;
    
    //IT: Italian
    case "IT":
    break;
    
    //GE: German
    case "GE":
    break;
    
    //BR: Portuguese
    case "BR":
    break;
    
    //JP: Japanese
    case "JP":
    break;
    
    //CH: Chinese
    case "CH":
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HOME Menu entry for Rich Presence
//1: Define status based on the amount of titles that you have on the launcher
if (games_total == 0)
{
    discord_set_details("🏠 | HOME Menu");
    discord_set_state("📕 | You don't have any title installed!");
    discord_set_image_large("icn_nx_launcher");
    discord_set_image_small("icn_nx_launcher_home");
}
else if (games_total == 1)
{
    discord_set_details("🏠 | HOME Menu");
    discord_set_state("📕 | You just have one title on the launcher");
    discord_set_image_large("icn_nx_launcher");
    discord_set_image_small("icn_nx_launcher_home");
}
else if (games_total &gt; 1)
{
    discord_set_details("🏠 | HOME Menu");
    discord_set_state("📕 | Choosing between " + string(games_total) + " titles in the launcher");
    discord_set_image_large("icn_nx_launcher");
    discord_set_image_small("icn_nx_launcher_home");
}

//2: Update Rich Presence status
discord_set_timestamp_start(0);
discord_presence_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean assets (RAM)
//Delete wallpaper
if (sprite_exists(custom_bg))
{
    sprite_delete(custom_bg);
}

//Delete fonts
if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_titles.ttf"))
{
    font_delete(font_titles);
}

if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_details.ttf"))
{
    font_delete(font_details);
}

//Un-draw list
var i;
for(i = 0; i &lt; games_total; i += 1)
{    
    //Delete thumbnails
    if (sprite_exists(games_thumb[i]))
    {
        sprite_delete(games_thumb[i]);
    }
};

//Un-load song
audio_stop_sound(wallpaper_song);
audio_destroy_stream(wallpaper_song);

//Limpar
cleanmem();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load assets and custom theme
//1: Set default values
custom_bg = noone;  //No custom background
profile_icon = spr_def_profilepicture;  //Default profile picture
wallpaper_song = audio_create_stream(global.launcher_coredir + "\dummy.aud");   //Empty audio
font_titles = fnt_nsw_ntlg_24; //Default font for Titles
font_details = fnt_nsw_udsg_12; //Default font for Details
font_popup = fnt_nsw_udsg_12;   //Default font for Pop-ups
font_clock = fnt_goo_prodsans_24;   //Default font to be used on the clock
games_total = 0; //No games on the launcher by default

//2: Load custom wallpaper
if (file_exists_fmns(game_save_id + "custom_theme\_wallpaper.png"))
{
    custom_bg = sprite_add(game_save_id + "custom_theme\_wallpaper.png", 0, false, false, 0, 0);
}

//3: Load profile picture
if (file_exists_fmns(game_save_id + "_profile.png"))
{
    profile_icon = sprite_add(game_save_id + "_profile.png", 0, false, false, 0, 0);
}

//4: Load custom theme assets
///Create "Music Player" object
instance_create(0, 0, obj_musicplayer);

///Load custom fonts
//Titles
if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_titles.ttf"))
{
    font_titles = font_add(custom_titles_font, 24, false, false, 32, 255)
}

//Details
if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_details.ttf"))
{
    font_details = font_add(custom_details_font, 12, false, false, 32, 255)
}

///Load custom sound effects
if (file_exists_fmns(game_save_id + "custom_theme\fonts\thm_details.ttf"))
{
    snd_sfx_gameselect = audio_create_stream(game_save_id + "custom_theme\sounds\thm_sfx_select.wav")
}

//5: Load number of titles on the launcher
ini_open(game_save_id + "title_collection\_total.ini");
games_total = real(ini_read_string("NX_TITLE", "total", "0"));
ini_close();

//6: Load list of titles inside of the launcher
var i;
for(i = 0; i &lt; games_total; i += 1)
{
    //Load titles's details
    ini_open(game_save_id + "title_collection\game_" + string(i) + ".ini");
    games_title[i] = ini_read_string("NX_TITLE","title","???");
    games_title_file[i] = ini_read_string("NX_TITLE","title_file","");
    games_path[i] = ini_read_string("NX_TITLE","path","");
    games_rom[i] = ini_read_string("NX_TITLE","rom","");
    games_rom_file[i] = ini_read_string("NX_TITLE","rom_file","");
    games_subselect[i] = real(ini_read_string("NX_TITLE","subselect","1"));
    games_shortcut[i] = real(ini_read_string("NX_TITLE","shortcut","0"));
    games_animframes[i] = real(ini_read_string("NX_TITLE","animframes","1"));
    games_animspeed[i] = real(ini_read_string("NX_TITLE","animspeed","0"));
    
    //Load titles's thumbnails
    if(file_exists_fmns(game_save_id + "\title_collection\game_" + string(i) + ".png"))
    {
        games_thumb[i] = sprite_add(game_save_id + "\title_collection\game_" + string(i) + ".png", games_animframes[i], 0, 1, 0, 0);
    }
    else
    {
        games_thumb[i] = sprite_add(global.launcher_coredir + "\default.tbn",0,0,0,0,0);
    }
    ini_close();
};

//6²: Thumbnail animator
anim_games[i] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End the HOME MENU
ini_open(game_save_id + '_data.ini');
select_index = ini_write_real("Launcher Data", "position", select_index);
theme = ini_write_real("Settings", "theme", theme);
fullscreen = ini_write_real("Settings", "fullscreen", fullscreen);
ini_close();

//Discord RPC shutdown
discord_presence_clear();
discord_presence_shutdown();

event_user(1);
cleanmem_init(1);

//Free the surface that draws the profile picture
surface_free(profile_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the HOME Menu
//Display render
display_render();

//1: Load settings
ini_open(game_save_id + '_data.ini');
theme = ini_read_real("Settings", "theme", "0");
ui_buttons = ini_read_real("Settings", "ui_buttons", "1");
fullscreen = ini_read_real("Settings", "fullscreen", "0");
language = ini_read_real("Settings", "lang", "en");
discord_rpc = ini_read_real("Settings", "discord", "0");
database_thumbnail = ini_read_real("Settings", "thumb_db", "0");
database_profilepic = ini_read_real("Settings", "profilepic_db", "0");
database_wallpaper = ini_read_real("Settings", "wallpaper_db", "0");
update_check = ini_read_real("Launcher Data", "update_check", "0");
select_index = ini_read_real("Launcher Data", "position", "0");
profile_name = ini_read_string("User Data", "profile_name", "Guest User");
ini_close();

//2: Start loading assets, theme, RAM cleaner and language strings
event_user(0); //Assets and custom theme
event_user(15); //Language strings
cleanmem_init(0); //RAM Cleaner

//4: Set fullscreen
alarm[4] = 6;

//5: Center window (if on "Window Mode")
alarm[3] = 2;

//5: Prevent the game selector from starting out of the list
if(select_index &gt; games_total - 1){

    if(games_total == 0)
    {
        select_index = 0
    }
    else
    {
        select_index = games_total - 1;
    }
};

//6: Initialize Discord's ClientID
discord_presence_init("518968328744861704");

//7: Update Discord status
event_user(11);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the launcher's interface
/// ---------- Color Variables ----------
//Black and White (for theme-switching)
c_fx_black = make_colour_rgb(35, 35, 35);
c_fx_white = $f0f0f0
//Blue and Aqua (Cursor)
c_fx_cursor_blue = make_colour_rgb(30, 96, 186);
c_fx_cursor_aqua = make_colour_rgb(0,153,153);
//Blue and Aqua (Normal, Alt. and Names)
c_switchblue = (make_colour_rgb(70,152,200));
c_switchblue_alt = (make_colour_rgb(0,76,153));
c_switchblue_name = (make_colour_rgb(102,178,255));
c_switchaqua = (make_colour_rgb(82,209,202));
c_switchaqua_alt = (make_colour_rgb(0,153,153));
c_switchaqua_name = (make_colour_rgb(0,204,204));
//Blue and Aqua (Merged, useful for effects and names)
c_switchaqua_merge = merge_colour(c_switchaqua, c_switchaqua_alt,col_numb);
c_switchblue_merge = merge_colour(c_switchblue, c_switchblue_alt,col_numb);
c_switchaqua_nmerge = merge_colour(c_switchaqua, c_switchaqua_name,col_numb);
c_switchblue_nmerge = merge_colour(c_switchblue, c_switchblue_name,col_numb);
//Error
c_switcherror = merge_colour(c_red, c_maroon, col_numb);
//Edit Mode
c_switchmove = merge_colour(c_yellow, c_orange, col_numb);

/// ---------- Game List UI ----------
//Rolagem (de acordo com offset)
draw_set_font(font_titles)
if(select_index &gt; 1)
    offset = 502+(-276*select_index);
else
    offset = 98;

//Lista de jogos (Mostrar apenas o que esta na tela)
var i, i_start, i_end;
if(select_index &gt; 1){

    i_start = select_index-2;
    i_end = select_index+3;
};
else{

    i_start = 0;
    i_end = select_index+5;
}; for(i=i_start; i&lt;i_end; i+=1){

    var vv = 0;
    if(select_index == i)
        vv = offset_v = -2;
                
    //Sombra
    draw_sprite(spr_gamelist_shadow,theme,85+offset+(256+20)*i,235-vv);
    
    //Blocos vázios
    if(i &gt; games_total-1)
    ||((move == 1)&amp;&amp;(i == move_origin))
        draw_sprite(spr_gamelist_thumbnail,theme,85+offset+(256+20)*i,235-vv);
    //Thumbnail dos jogos
    else
    {
        if(sprite_exists(games_thumb[i]))
        &amp;&amp;(games_total &gt; 0)
        {
            draw_sprite_stretched(games_thumb[i],0,85+offset+(256+20)*i,235-vv,256,256);
        }
        else
        {
            draw_sprite_stretched(global.launcher_coredir + "default.tbn",0,85+offset+(256+20)*i,235-vv,256,256);
        }
    };
};
    
//Seletor de jogos
if(select_index &lt; games_total+1)
&amp;&amp;(games_total &gt; 0)
{
    var _msg;
    
    //Mover
    if(move == 1)
    {
        _msg = games_title[move_origin];
    };
    else
    {
        //Padrão
        if(file_exists_fmns(games_path[select_index]))
        {
            _msg = games_title[select_index];
        };
        //Jogo não encotrado
        else
        {
            _msg = "[Game not found]";
        };
    };

    //Mostrar thumbnail que esta sendo movida
    var move_offset = 0;
    if(move == 1)
    {
        move_offset = 32;
        if(sprite_exists(games_thumb[move_origin]))
        {
            draw_set_alpha(col_numb+0.4);
            draw_sprite_stretched(games_thumb[move_origin],0,85+(offset-0)+276*select_index,236-32-2,256,256);
            draw_set_alpha(1);
        };
    };
    
    //Seletor
    offset_v = 0;
    switch (theme)
    {
        case 1:
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switchblue_merge,1);
        break;
        
        case 0:
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switchaqua_merge,1);
        break;
    }
    if (move == 1)
    {
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switchmove,1);
    }
    if !(file_exists_fmns(games_path[select_index]))
    {
        draw_sprite_ext(spr_gamelist_selector,0,85+(offset-10)+276*select_index,224-offset_v-move_offset,1,1,0,c_switcherror,1);
    }
    
    //Nome do jogo selecionado
    if(select_index == 0)
    {
        if (theme != 0)&amp;&amp;(move == 0)&amp;&amp;(file_exists_fmns(games_path[select_index]))
        {
            draw_text_colour(85+offset-16,164-offset_v-move_offset,_msg,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,1);
        }
        else if (theme != 1)&amp;&amp;(move == 0)&amp;&amp;(file_exists_fmns(games_path[select_index]))
        {
            draw_text_colour(85+offset-16,164-offset_v-move_offset,_msg,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,1);
        }
        if (move == 1)
        {
            draw_text_colour(85+offset-16,164-offset_v-move_offset,_msg,c_switchmove,c_switchmove,c_switchmove,c_switchmove,1);
        }
        if (move == 0)&amp;&amp;!(file_exists_fmns(games_path[select_index]))
        {
            draw_sprite_ext(spr_nsw_alert_icons, 3, 85+offset-16, 169-offset_v-move_offset, 0.4, 0.4, 0, c_switcherror, 1);
            draw_text_colour(125+offset-16,164-offset_v-move_offset,_msg,c_switcherror,c_switcherror,c_switcherror,c_switcherror,1);
        }
    }
    else
    {
        draw_set_halign(fa_center);
        if (theme != 0)&amp;&amp;(move == 0)&amp;&amp;(file_exists_fmns(games_path[select_index]))
        {
            draw_text_colour(85+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,c_switchblue_nmerge,1);
        }
        else if (theme != 1)&amp;&amp;(move == 0)&amp;&amp;(file_exists_fmns(games_path[select_index]))
        {
            draw_text_colour(85+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,c_switchaqua_nmerge,1);
        }
        if (move == 1)
        {
            draw_text_colour(85+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switchmove,c_switchmove,c_switchmove,c_switchmove,1);
        }
        if !(file_exists_fmns(games_path[select_index]))
        {
            draw_sprite_ext(spr_nsw_alert_icons, 3, -75+offset+(276*select_index)+256/2, 169-offset_v-move_offset, 0.4, 0.4, 0, c_switcherror, 1);
            draw_text_colour(110+offset+(276*select_index)+256/2,164-offset_v-move_offset,_msg,c_switcherror,c_switcherror,c_switcherror,c_switcherror,1);
        }
        draw_set_halign(fa_left);
        
        if(move == 0)
        {
            if(games_shortcut[select_index] == 1)
            {
                draw_sprite_ext(spr_gamelist_shortcut_icon,theme,(85+offset+(276*select_index)+(256/2)-116),443+parental_offset-offset_v,1,1,0,c_white,1);
            }
        }
    };
};

//Draw controller type and buttons
if (gamepad_is_connected(0)) || (gamepad_is_connected(4))
{
    //Draw the controller being used
    switch (theme)
    {
        case 0:
        draw_sprite_ext(spr_nsw_device_icons, 1, 112, 640, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
        break;
        
        case 1:
        draw_sprite_ext(spr_nsw_device_icons, 1, 112, 640, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
        break;
    }
    
    //Draw the buttons
    switch (theme)
    {
        case 0:
        if (games_total &gt; 0)
        {
            draw_set_font(fnt_nsw_udsg_18);
            
            //Move
            draw_sprite_ext(spr_ctr_buttons, 2, 1120/1.65-28, 650, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
            draw_text_colour(1178/1.65, 655, "Move Around", make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), 1);
            
            //Edit Mode
            draw_sprite_ext(spr_ctr_buttons, 1, 1120/1.22-12, 650, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
            draw_text_colour(1178/1.22, 655, "Edit Mode", make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), 1);
            
            //Start
            draw_sprite_ext(spr_ctr_buttons, 0, 1120, 650, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
            draw_text_colour(1178, 655, "Start", make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), 1);
        }
        break;
        
        case 1:
        if (games_total &gt; 0)
        {
            draw_set_font(fnt_nsw_udsg_18);
            
            //Move
            draw_sprite_ext(spr_ctr_buttons, 2, (1120/1.65)-28, 650, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
            draw_text_colour(1178/1.65, 655, "Move Around", make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), 1);
            
            //Edit Mode
            draw_sprite_ext(spr_ctr_buttons, 1, (1120/1.22)-12, 650, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
            draw_text_colour(1178/1.22, 655, "Edit Mode", make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), 1);
            
            //Start
            draw_sprite_ext(spr_ctr_buttons, 0, 1120, 650, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
            draw_text_colour(1178, 655, "Start", make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), 1);
        }
        break;
    }
}
else if !(gamepad_is_connected(0)) || !(gamepad_is_connected(4))
{
    //Draw the controller being used
    switch (theme)
    {
        case 0:
        draw_sprite_ext(spr_nsw_device_icons, 0, 112, 640, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
        break;
        
        case 1:
        draw_sprite_ext(spr_nsw_device_icons, 0, 112, 640, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
        break;
    }
    
    //Draw the buttons
    switch (theme)
    {
        case 0:
        if (games_total &gt; 0)
        {
            draw_set_font(fnt_nsw_udsg_18);
            
            //Move
            draw_sprite_ext(spr_kbd_buttons, 2, (1120/1.65)-28, 650, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
            draw_text_colour(1178/1.65, 655, "Move Around", make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), 1);
            
            //Edit Mode
            draw_sprite_ext(spr_kbd_buttons, 1,  (1120/1.22)-12, 650, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
            draw_text_colour(1178/1.22, 655, "Edit Mode", make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), 1);
            
            //Start
            draw_sprite_ext(spr_kbd_buttons, 0, 1120, 650, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1);
            draw_text_colour(1178, 655, "Start", make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), make_colour_rgb(35, 35, 35), 1);
        }
        break;
        
        case 1:
        if (games_total &gt; 0)
        {
            draw_set_font(fnt_nsw_udsg_18);
            
            //Move
            draw_sprite_ext(spr_kbd_buttons, 2, (1120/1.65)-28, 650, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
            draw_text_colour(1178/1.65, 655, "Move Around", make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), 1);
            
            //Edit Mode
            draw_sprite_ext(spr_kbd_buttons, 1, (1120/1.22)-12, 650, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
            draw_text_colour(1178/1.22, 655, "Edit Mode", make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), 1);
            
            //Start
            draw_sprite_ext(spr_kbd_buttons, 0, 1120, 650, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1);
            draw_text_colour(1178, 655, "Start", make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), make_colour_rgb(235, 235, 235), 1);
        }
        break;
    }
}

//Draw sidebar
switch (theme)
{
    case 0:
    draw_rectangle_colour(0, 0, 96, 720, make_colour_rgb(255, 255, 255), make_colour_rgb(255, 255, 255), make_colour_rgb(255, 255, 255), make_colour_rgb(255, 255, 255), false);
    break;
    
    case 1:
    draw_rectangle_colour(0, 0, 96, 720, make_colour_rgb(20, 20, 20), make_colour_rgb(20, 20, 20), make_colour_rgb(20, 20, 20), make_colour_rgb(20, 20, 20), false);
    break;
}

//Draw the profile picture
if !(surface_exists(profile_surf))
{
    profile_surf = surface_create(64, 64);
}
surface_set_target(profile_surf)
draw_sprite(spr_shp_profilemimage_small, 0, sprite_xoffset, sprite_yoffset)
if (sprite_exists(profile_icon))
{
    draw_set_color_write_enable(1, 1, 1, 0)
    draw_sprite_stretched(profile_icon, 0, 0, 0, 64, 64)
    draw_set_color_write_enable(1, 1, 1, 1)
}

surface_reset_target();
draw_surface(profile_surf, 16, 32)

//Draw the buttons
draw_sprite_ext(spr_nsw_system_icons, 0, 24, 176, 0.5, 0.5, 0, make_colour_rgb(255, 0, 0), 1);
draw_sprite_ext(spr_nsw_system_icons, 1, 24, 272, 0.5, 0.5, 0, make_colour_rgb(255, 128, 0), 1);
draw_sprite_ext(spr_nsw_system_icons, 2, 24, 368, 0.5, 0.5, 0, make_colour_rgb(0, 128, 255), 1);
switch (theme)
{
    case 0:
    draw_sprite_ext(spr_nsw_system_icons, 3, 24, 464, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1)
    draw_sprite_ext(spr_nsw_system_icons, 4, 24, 560, 0.5, 0.5, 0, make_colour_rgb(35, 35, 35), 1)
    break;
    
    case 1:
    draw_sprite_ext(spr_nsw_system_icons, 3, 24, 464, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1)
    draw_sprite_ext(spr_nsw_system_icons, 4, 24, 560, 0.5, 0.5, 0, make_colour_rgb(235, 235, 235), 1)
    break;
}

//Thumbnail-related buttons
if (ui_buttons == 1)
{
    draw_sprite_ext(spr_btn_thumbadd, theme, 144, 42, 1, 1, 0, c_white, 1);
    draw_sprite_ext(spr_btn_thumbedit, theme, ((144+50)+16), 42, 1, 1, 0, c_white, 1);
    draw_sprite_ext(spr_btn_thumbname, theme, ((144+50+50)+32), 42, 1, 1, 0, c_white, 1);
    draw_sprite_ext(spr_btn_thumbexec, theme, ((144+50+50+50)+48), 42, 1, 1, 0, c_white, 1);
}

//Draw time
var time_hour = string_replace_all(string_format(current_hour,2,0)," ","0");
var time_minute = string_replace_all(string_format(current_minute,2,0)," ","0");
draw_set_font(font_clock)
switch (theme)
{
    case 0:
    draw_set_colour(c_black);
    draw_text(1135, 48, time_hour + ":" + time_minute);
    break;
    
    case 1:
    draw_set_colour(c_white);
    draw_text(1135, 48, time_hour + ":" + time_minute);
    break;
}

//Draw internet connection
switch (theme)
{
    case 0:
    if (os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 3, 1070, 54, 1, 1, 0, c_white, 1)
    }
    else if !(os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 2, 1070, 54, 1, 1, 0, c_white, 1)
    }
    break;
    
    case 1:
    if (os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 1, 1070, 54, 1, 1, 0, c_white, 1)
    }
    else if !(os_is_network_connected())
    {
        draw_sprite_ext(spr_default_network, 0, 1070, 54, 1, 1, 0, c_white, 1)
    }
    break;
}



/// ----- THIS NEEDS TO BE KEPT AT THE END OF THE CODE -----
//------------- Dialogo -------------
//Fundo
draw_set_colour(c_black);
draw_set_alpha(0.9);
draw_rectangle(dialog_filterleft,-2000,dialog_filterright,4000,0);
draw_set_colour(c_white);
draw_set_alpha(1);
    
if(dialog == 1){
    
    //Descrição
    draw_set_font(fnt_nsw_ntlg_24);
    draw_set_colour(c_aqua);
    draw_set_halign(fa_center);
    draw_text(1280/2,720/2-48,dialog_description);
    draw_set_colour(c_white);
    
    //Texto
    draw_set_font(fnt_nsw_udsg_18);
    draw_text(1280/2,720/2,dialog_return+dialog_inputb);
    draw_set_halign(fa_left);
    draw_set_colour(c_white);
};

//Deletando...
if(alarm[10] != -1){

    draw_set_colour(c_black);
    draw_set_alpha(0.7);
    draw_rectangle(0,-2000,1280,4000,0);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    
    //Texto
    draw_set_colour(c_aqua);
    draw_set_halign(fa_center);
    draw_text(1280/2,(720/2)-32,"Deleting...");
    draw_set_halign(fa_left);
    draw_set_colour(c_white);
};

//Filtro
if!(window_has_focus())
&amp;&amp;!(window_get_fullscreen()){

    draw_set_colour(c_black);
    draw_set_alpha(0.7);
    draw_rectangle(0,0,1280,720,0);
    draw_set_alpha(1);
    draw_set_colour(c_white);
};

//Draw cursor
window_set_cursor(cr_none);
switch (theme)
{
    case 0:
    draw_sprite_ext(spr_fus_cursor, 0, mouse_x, mouse_y, 1, 1, 0, make_colour_rgb(26, 223, 179), 1);
    break;
    
    case 1:
    draw_sprite_ext(spr_fus_cursor, 0, mouse_x, mouse_y, 1, 1, 0, make_colour_rgb(51, 153, 255), 1);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw static stuff
//Wallpaper (both Default and Custom)
/// ---------- Wallpaper ----------
//No wallpaper exists
switch (theme)
{
    case 0:
    draw_background_tiled_ext(bck_lighttheme, 0, 0, 1, 1, c_white, 1);
    break;
    
    case 1:
    draw_background_tiled_ext(bck_darktheme, 0, 0, 1, 1, c_white, 1);
    break;
}

//Wallpaper exists
if sprite_exists(custom_bg)
{
    draw_sprite_stretched(custom_bg, 0, 0, 0, 1280, 720);
    //Draw semi-transparent wallpaper
    switch (theme)
    {
        case 0:
        draw_background_tiled_ext(bck_semi_lighttheme, 0, 0, 1, 1, c_white, 1);
        break;
        
        case 1:
        draw_background_tiled_ext(bck_semi_darktheme, 0, 0, 1, 1, c_white, 1);
        break;
    }
}
else
{
    switch (theme)
    {
        case 0:
        draw_background_tiled_ext(bck_lighttheme, 0, 0, 1, 1, c_white, 1);
        break;
        
        case 1:
        draw_background_tiled_ext(bck_darktheme, 0, 0, 1, 1, c_white, 1);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
